!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	.\Test\StlTest.cpp	/^    A()$/;"	kind:f	line:9	language:C++	class:A	access:public	signature:()
A	.\Test\StlTest.cpp	/^    A(string name)$/;"	kind:f	line:12	language:C++	class:A	access:public	signature:(string name)
A	.\Test\StlTest.cpp	/^class A$/;"	kind:c	line:6	language:C++	file:
A::A	.\Test\StlTest.cpp	/^    A()$/;"	kind:f	line:9	language:C++	class:A	access:public	signature:()
A::A	.\Test\StlTest.cpp	/^    A(string name)$/;"	kind:f	line:12	language:C++	class:A	access:public	signature:(string name)
A::endl	.\Test\StlTest.cpp	/^        cout <<"~A, " <<name <<endl;$/;"	kind:l	line:18	language:C++
A::name	.\Test\StlTest.cpp	/^    string name;$/;"	kind:m	line:22	language:C++	class:A	file:	access:private
A::~A	.\Test\StlTest.cpp	/^    ~A()$/;"	kind:f	line:16	language:C++	class:A	access:public	signature:()
AddChild	.\SyntaxParser\Ast\AstParser.cpp	/^            this->topLevelStmt->AddChild(stmt);$/;"	kind:p	line:28	language:C++	file:	signature:(stmt)
AddChild	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^void ComposedStmt::AddChild(Stmt* child)$/;"	kind:f	line:12	language:C++	class:ComposedStmt	signature:(Stmt* child)
AddChild	.\SyntaxParser\Stmt\ComposedStmt.h	/^    void AddChild(Stmt *);$/;"	kind:p	line:26	language:C++	class:ComposedStmt	access:public	signature:(Stmt *)
Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	/^Stmt* DelimiterAnalyser::Analyze(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:9	language:C++	class:DelimiterAnalyser	signature:(TokenStream& tokenStream, const Stmt* parent)
Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    Stmt* Analyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:11	language:C++	class:DelimiterAnalyser	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^Stmt* DelimiterAnalyserFactory::Analyze(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:42	language:C++	class:DelimiterAnalyserFactory	signature:(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent)
Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    Stmt* Analyze(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent);$/;"	kind:p	line:13	language:C++	class:DelimiterAnalyserFactory	access:public	signature:(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent)
And	.\Lexer\TokenKind.h	/^    And,$/;"	kind:e	line:89	language:C++	enum:TokenKind
AndAnd	.\Lexer\TokenKind.h	/^    AndAnd,$/;"	kind:e	line:94	language:C++	enum:TokenKind
ArraySize	.\Test\ArrayTest.cpp	/^void ArraySize(int a[])$/;"	kind:f	line:6	language:C++	signature:(int a[])
ArrayTest	.\Test\ArrayTest.cpp	/^void ArrayTest()$/;"	kind:f	line:11	language:C++	signature:()
ArrayTest	.\Test\Test.cpp	/^extern void ArrayTest();$/;"	kind:p	line:7	language:C++	file:	signature:()
ArrayTest.cpp	.\Test\ArrayTest.cpp	1;"	kind:F	line:1	language:C++
AstParser	.\SyntaxParser\Ast\AstParser.cpp	/^AstParser::AstParser(const wstring file)$/;"	kind:f	line:9	language:C++	class:AstParser	signature:(const wstring file)
AstParser	.\SyntaxParser\Ast\AstParser.h	/^    AstParser(const wstring file);$/;"	kind:p	line:8	language:C++	class:AstParser	access:public	signature:(const wstring file)
AstParser	.\SyntaxParser\Ast\AstParser.h	/^class AstParser$/;"	kind:c	line:5	language:C++
AstParser.cpp	.\SyntaxParser\Ast\AstParser.cpp	1;"	kind:F	line:1	language:C++
AstParser.h	.\SyntaxParser\Ast\AstParser.h	1;"	kind:F	line:1	language:C++
AstParser::AstParser	.\SyntaxParser\Ast\AstParser.cpp	/^AstParser::AstParser(const wstring file)$/;"	kind:f	line:9	language:C++	class:AstParser	signature:(const wstring file)
AstParser::AstParser	.\SyntaxParser\Ast\AstParser.h	/^    AstParser(const wstring file);$/;"	kind:p	line:8	language:C++	class:AstParser	access:public	signature:(const wstring file)
AstParser::Parse	.\SyntaxParser\Ast\AstParser.cpp	/^ComposedStmt* AstParser::Parse()$/;"	kind:f	line:19	language:C++	class:AstParser	signature:()
AstParser::Parse	.\SyntaxParser\Ast\AstParser.h	/^    ComposedStmt* Parse();$/;"	kind:p	line:10	language:C++	class:AstParser	access:public	signature:()
AstParser::tokenStream	.\SyntaxParser\Ast\AstParser.h	/^    TokenStream tokenStream;$/;"	kind:m	line:13	language:C++	class:AstParser	access:private
AstParser::topLevelStmt	.\SyntaxParser\Ast\AstParser.h	/^    ComposedStmt* topLevelStmt;$/;"	kind:m	line:14	language:C++	class:AstParser	access:private
AstParser::~AstParser	.\SyntaxParser\Ast\AstParser.cpp	/^AstParser::~AstParser()$/;"	kind:f	line:14	language:C++	class:AstParser	signature:()
AstParser::~AstParser	.\SyntaxParser\Ast\AstParser.h	/^    ~AstParser();$/;"	kind:p	line:9	language:C++	class:AstParser	access:public	signature:()
AstParserTest	.\Test\AstParserTest.cpp	/^void AstParserTest()$/;"	kind:f	line:10	language:C++	signature:()
AstParserTest	.\Test\Test.cpp	/^extern void AstParserTest();$/;"	kind:p	line:5	language:C++	file:	signature:()
AstParserTest.cpp	.\Test\AstParserTest.cpp	1;"	kind:F	line:1	language:C++
AstPrinter	.\SyntaxParser\StmtVisitor\AstPrinter.h	/^class AstPrinter : public StmtVisitor$/;"	kind:c	line:5	language:C++	inherits:StmtVisitor
AstPrinter.cpp	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	1;"	kind:F	line:1	language:C++
AstPrinter.h	.\SyntaxParser\StmtVisitor\AstPrinter.h	1;"	kind:F	line:1	language:C++
AstPrinter::Print	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^const wstring AstPrinter::Print(const Stmt& stmt) const$/;"	kind:f	line:3	language:C++	class:AstPrinter	signature:(const Stmt& stmt) const
AstPrinter::Print	.\SyntaxParser\StmtVisitor\AstPrinter.h	/^    const wstring Print(const Stmt&) const;$/;"	kind:p	line:12	language:C++	class:AstPrinter	access:private	signature:(const Stmt&) const
AstPrinter::Visit	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^void AstPrinter::Visit(const ComposedStmt &stmt)$/;"	kind:f	line:25	language:C++	class:AstPrinter	signature:(const ComposedStmt &stmt)
AstPrinter::Visit	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^void AstPrinter::Visit(const IncludeStmt &stmt)$/;"	kind:f	line:20	language:C++	class:AstPrinter	signature:(const IncludeStmt &stmt)
AstPrinter::Visit	.\SyntaxParser\StmtVisitor\AstPrinter.h	/^    virtual void Visit(const ComposedStmt &);$/;"	kind:p	line:9	language:C++	class:AstPrinter	access:protected	implementation:virtual	signature:(const ComposedStmt &)
AstPrinter::Visit	.\SyntaxParser\StmtVisitor\AstPrinter.h	/^    virtual void Visit(const IncludeStmt &);$/;"	kind:p	line:8	language:C++	class:AstPrinter	access:protected	implementation:virtual	signature:(const IncludeStmt &)
BackSlash	.\Lexer\TokenKind.h	/^    BackSlash,$/;"	kind:e	line:72	language:C++	enum:TokenKind
Backward	.\Lexer\TokenStream.h	/^    Backward,$/;"	kind:e	line:12	language:C++	enum:TokenSearchDirection
Bang	.\Lexer\TokenKind.h	/^    Bang,$/;"	kind:e	line:88	language:C++	enum:TokenKind
BlockCommenterBegin	.\Lexer\TokenKind.h	/^    BlockCommenterBegin,$/;"	kind:e	line:78	language:C++	enum:TokenKind
BlockCommenterEnd	.\Lexer\TokenKind.h	/^    BlockCommenterEnd,$/;"	kind:e	line:79	language:C++	enum:TokenKind
Bool	.\Lexer\TokenKind.h	/^    Bool,$/;"	kind:e	line:45	language:C++	enum:TokenKind
BuildToken2TokenKindMap	.\Lexer\TokenKind.cpp	/^void TokenMatcher::BuildToken2TokenKindMap()$/;"	kind:f	line:94	language:C++	class:TokenMatcher	signature:()
BuildToken2TokenKindMap	.\Lexer\TokenKind.h	/^    void BuildToken2TokenKindMap();$/;"	kind:p	line:128	language:C++	class:TokenMatcher	access:private	signature:()
BuildTokenKind2TokenMap	.\Lexer\TokenKind.cpp	/^void TokenMatcher::BuildTokenKind2TokenMap()$/;"	kind:f	line:29	language:C++	class:TokenMatcher	signature:()
BuildTokenKind2TokenMap	.\Lexer\TokenKind.h	/^    void BuildTokenKind2TokenMap();$/;"	kind:p	line:127	language:C++	class:TokenMatcher	access:private	signature:()
BuiltInTypeEnd	.\Lexer\TokenKind.h	/^    BuiltInTypeEnd = Long,$/;"	kind:e	line:48	language:C++	enum:TokenKind
BuiltInTypeStart	.\Lexer\TokenKind.h	/^    BuiltInTypeStart,$/;"	kind:e	line:41	language:C++	enum:TokenKind
Class	.\Lexer\TokenKind.h	/^    Class,$/;"	kind:e	line:37	language:C++	enum:TokenKind
Colon	.\Lexer\TokenKind.h	/^    Colon,$/;"	kind:e	line:73	language:C++	enum:TokenKind
Column	.\Basic\Location.h	/^    int Column;$/;"	kind:m	line:19	language:C++	class:Location	access:public
Comma	.\Lexer\TokenKind.h	/^    Comma = DelimiterStart,$/;"	kind:e	line:59	language:C++	enum:TokenKind
Common.cpp	.\Basic\Common.cpp	1;"	kind:F	line:1	language:C++
Common.h	.\Basic\Common.h	1;"	kind:F	line:1	language:C++
ComposedStmt	.\SyntaxParser\Stmt\ComposedStmt.h	/^    ComposedStmt(TokenStream &tokenStream, const Stmt* parent, StmtKind kind)$/;"	kind:f	line:9	language:C++	class:ComposedStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent, StmtKind kind)
ComposedStmt	.\SyntaxParser\Stmt\ComposedStmt.h	/^class ComposedStmt : public Stmt$/;"	kind:c	line:6	language:C++	inherits:Stmt
ComposedStmt.cpp	.\SyntaxParser\Stmt\ComposedStmt.cpp	1;"	kind:F	line:1	language:C++
ComposedStmt.h	.\SyntaxParser\Stmt\ComposedStmt.h	1;"	kind:F	line:1	language:C++
ComposedStmt::AddChild	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^void ComposedStmt::AddChild(Stmt* child)$/;"	kind:f	line:12	language:C++	class:ComposedStmt	signature:(Stmt* child)
ComposedStmt::AddChild	.\SyntaxParser\Stmt\ComposedStmt.h	/^    void AddChild(Stmt *);$/;"	kind:p	line:26	language:C++	class:ComposedStmt	access:public	signature:(Stmt *)
ComposedStmt::ComposedStmt	.\SyntaxParser\Stmt\ComposedStmt.h	/^    ComposedStmt(TokenStream &tokenStream, const Stmt* parent, StmtKind kind)$/;"	kind:f	line:9	language:C++	class:ComposedStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent, StmtKind kind)
ComposedStmt::GetChildren	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^const vector<Stmt*> ComposedStmt::GetChildren() const$/;"	kind:f	line:17	language:C++	class:ComposedStmt	signature:() const
ComposedStmt::GetChildren	.\SyntaxParser\Stmt\ComposedStmt.h	/^    const vector<Stmt*> GetChildren() const;$/;"	kind:p	line:27	language:C++	class:ComposedStmt	access:public	signature:() const
ComposedStmt::GetKind	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:15	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:() const
ComposedStmt::GetName	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^const wstring ComposedStmt::GetName() const$/;"	kind:f	line:22	language:C++	class:ComposedStmt	signature:() const
ComposedStmt::GetName	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual const wstring GetName() const;$/;"	kind:p	line:19	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:() const
ComposedStmt::IsMe	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual bool IsMe() const$/;"	kind:f	line:20	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:() const
ComposedStmt::Parse	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^Stmt* ComposedStmt::Parse()$/;"	kind:f	line:27	language:C++	class:ComposedStmt	signature:()
ComposedStmt::Parse	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:24	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:()
ComposedStmt::children	.\SyntaxParser\Stmt\ComposedStmt.h	/^    vector<Stmt*> children;$/;"	kind:m	line:30	language:C++	class:ComposedStmt	access:protected
ComposedStmt::kind	.\SyntaxParser\Stmt\ComposedStmt.h	/^    StmtKind kind;$/;"	kind:m	line:33	language:C++	class:ComposedStmt	access:private
ComposedStmt::~ComposedStmt	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^ComposedStmt::~ComposedStmt()$/;"	kind:f	line:3	language:C++	class:ComposedStmt	signature:()
ComposedStmt::~ComposedStmt	.\SyntaxParser\Stmt\ComposedStmt.h	/^    ~ComposedStmt();$/;"	kind:p	line:13	language:C++	class:ComposedStmt	access:public	signature:()
Const	.\Lexer\TokenKind.h	/^    Const,$/;"	kind:e	line:24	language:C++	enum:TokenKind
ConstCast	.\Lexer\TokenKind.h	/^    ConstCast,$/;"	kind:e	line:54	language:C++	enum:TokenKind
Define	.\Lexer\TokenKind.h	/^    Define,$/;"	kind:e	line:31	language:C++	enum:TokenKind
DelimiterAnalyser	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	/^DelimiterAnalyser::DelimiterAnalyser(TokenKind delimiter)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser	signature:(TokenKind delimiter)
DelimiterAnalyser	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    DelimiterAnalyser(TokenKind delimiter);$/;"	kind:p	line:10	language:C++	class:DelimiterAnalyser	access:public	signature:(TokenKind delimiter)
DelimiterAnalyser	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^class DelimiterAnalyser$/;"	kind:c	line:7	language:C++
DelimiterAnalyser.cpp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	1;"	kind:F	line:1	language:C++
DelimiterAnalyser.h	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	1;"	kind:F	line:1	language:C++
DelimiterAnalyser::Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	/^Stmt* DelimiterAnalyser::Analyze(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:9	language:C++	class:DelimiterAnalyser	signature:(TokenStream& tokenStream, const Stmt* parent)
DelimiterAnalyser::Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    Stmt* Analyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:11	language:C++	class:DelimiterAnalyser	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
DelimiterAnalyser::DelimiterAnalyser	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	/^DelimiterAnalyser::DelimiterAnalyser(TokenKind delimiter)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser	signature:(TokenKind delimiter)
DelimiterAnalyser::DelimiterAnalyser	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    DelimiterAnalyser(TokenKind delimiter);$/;"	kind:p	line:10	language:C++	class:DelimiterAnalyser	access:public	signature:(TokenKind delimiter)
DelimiterAnalyser::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	/^Stmt* DelimiterAnalyser::InnerAnalyze(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:20	language:C++	class:DelimiterAnalyser	signature:(TokenStream& tokenStream, const Stmt* parent)
DelimiterAnalyser::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
DelimiterAnalyser::delimiter	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    TokenKind delimiter;$/;"	kind:m	line:15	language:C++	class:DelimiterAnalyser	access:protected
DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory::DelimiterAnalyserFactory()$/;"	kind:f	line:25	language:C++	class:DelimiterAnalyserFactory	signature:()
DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    DelimiterAnalyserFactory();$/;"	kind:p	line:16	language:C++	class:DelimiterAnalyserFactory	access:private	signature:()
DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^class DelimiterAnalyserFactory$/;"	kind:c	line:8	language:C++
DelimiterAnalyserFactory.cpp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	1;"	kind:F	line:1	language:C++
DelimiterAnalyserFactory.h	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	1;"	kind:F	line:1	language:C++
DelimiterAnalyserFactory::Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^Stmt* DelimiterAnalyserFactory::Analyze(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:42	language:C++	class:DelimiterAnalyserFactory	signature:(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent)
DelimiterAnalyserFactory::Analyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    Stmt* Analyze(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent);$/;"	kind:p	line:13	language:C++	class:DelimiterAnalyserFactory	access:public	signature:(TokenKind tokenKind, TokenStream &tokenStream, const Stmt* parent)
DelimiterAnalyserFactory::DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory::DelimiterAnalyserFactory()$/;"	kind:f	line:25	language:C++	class:DelimiterAnalyserFactory	signature:()
DelimiterAnalyserFactory::DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    DelimiterAnalyserFactory();$/;"	kind:p	line:16	language:C++	class:DelimiterAnalyserFactory	access:private	signature:()
DelimiterAnalyserFactory::GetMe	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory& DelimiterAnalyserFactory::GetMe()$/;"	kind:f	line:10	language:C++	class:DelimiterAnalyserFactory	signature:()
DelimiterAnalyserFactory::GetMe	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    static DelimiterAnalyserFactory& GetMe();$/;"	kind:p	line:11	language:C++	class:DelimiterAnalyserFactory	access:public	signature:()
DelimiterAnalyserFactory::Release	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^void DelimiterAnalyserFactory::Release()$/;"	kind:f	line:20	language:C++	class:DelimiterAnalyserFactory	signature:()
DelimiterAnalyserFactory::Release	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    static void Release();$/;"	kind:p	line:12	language:C++	class:DelimiterAnalyserFactory	access:public	signature:()
DelimiterAnalyserFactory::factory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    map<TokenKind, DelimiterAnalyser*> factory;$/;"	kind:m	line:20	language:C++	class:DelimiterAnalyserFactory	access:private
DelimiterAnalyserFactory::s_DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory* DelimiterAnalyserFactory::s_DelimiterAnalyserFactory = NULL;$/;"	kind:m	line:8	language:C++	class:DelimiterAnalyserFactory	file:
DelimiterAnalyserFactory::s_DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    static DelimiterAnalyserFactory* s_DelimiterAnalyserFactory;$/;"	kind:m	line:19	language:C++	class:DelimiterAnalyserFactory	access:private
DelimiterAnalyserFactory::~DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory::~DelimiterAnalyserFactory()$/;"	kind:f	line:32	language:C++	class:DelimiterAnalyserFactory	signature:()
DelimiterAnalyserFactory::~DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    ~DelimiterAnalyserFactory();$/;"	kind:p	line:17	language:C++	class:DelimiterAnalyserFactory	access:private	signature:()
DelimiterAnalyser_Division	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.h	/^	DelimiterAnalyser_Division(TokenKind tokenKind)$/;"	kind:f	line:8	language:C++	class:DelimiterAnalyser_Division	access:public	signature:(TokenKind tokenKind)
DelimiterAnalyser_Division	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.h	/^class DelimiterAnalyser_Division : public DelimiterAnalyser$/;"	kind:c	line:5	language:C++	inherits:DelimiterAnalyser
DelimiterAnalyser_Division.cpp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.cpp	1;"	kind:F	line:1	language:C++
DelimiterAnalyser_Division.h	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.h	1;"	kind:F	line:1	language:C++
DelimiterAnalyser_Division::DelimiterAnalyser_Division	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.h	/^	DelimiterAnalyser_Division(TokenKind tokenKind)$/;"	kind:f	line:8	language:C++	class:DelimiterAnalyser_Division	access:public	signature:(TokenKind tokenKind)
DelimiterAnalyser_Division::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.cpp	/^Stmt* DelimiterAnalyser_Division::InnerAnalyze(TokenStream& stream, const Stmt* parent)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser_Division	signature:(TokenStream& stream, const Stmt* parent)
DelimiterAnalyser_Division::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser_Division	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
DelimiterAnalyser_LSmallBrace	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.h	/^	DelimiterAnalyser_LSmallBrace(TokenKind tokenKind)$/;"	kind:f	line:8	language:C++	class:DelimiterAnalyser_LSmallBrace	access:public	signature:(TokenKind tokenKind)
DelimiterAnalyser_LSmallBrace	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.h	/^class DelimiterAnalyser_LSmallBrace : public DelimiterAnalyser$/;"	kind:c	line:5	language:C++	inherits:DelimiterAnalyser
DelimiterAnalyser_LSmallBrace.cpp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.cpp	1;"	kind:F	line:1	language:C++
DelimiterAnalyser_LSmallBrace.h	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.h	1;"	kind:F	line:1	language:C++
DelimiterAnalyser_LSmallBrace::DelimiterAnalyser_LSmallBrace	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.h	/^	DelimiterAnalyser_LSmallBrace(TokenKind tokenKind)$/;"	kind:f	line:8	language:C++	class:DelimiterAnalyser_LSmallBrace	access:public	signature:(TokenKind tokenKind)
DelimiterAnalyser_LSmallBrace::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.cpp	/^Stmt* DelimiterAnalyser_LSmallBrace::InnerAnalyze(TokenStream& stream, const Stmt* parent)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser_LSmallBrace	signature:(TokenStream& stream, const Stmt* parent)
DelimiterAnalyser_LSmallBrace::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser_LSmallBrace	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
DelimiterAnalyser_Sharp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.h	/^	DelimiterAnalyser_Sharp(TokenKind tokenKind)$/;"	kind:f	line:8	language:C++	class:DelimiterAnalyser_Sharp	access:public	signature:(TokenKind tokenKind)
DelimiterAnalyser_Sharp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.h	/^class DelimiterAnalyser_Sharp : public DelimiterAnalyser$/;"	kind:c	line:5	language:C++	inherits:DelimiterAnalyser
DelimiterAnalyser_Sharp.cpp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.cpp	1;"	kind:F	line:1	language:C++
DelimiterAnalyser_Sharp.h	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.h	1;"	kind:F	line:1	language:C++
DelimiterAnalyser_Sharp::DelimiterAnalyser_Sharp	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.h	/^	DelimiterAnalyser_Sharp(TokenKind tokenKind)$/;"	kind:f	line:8	language:C++	class:DelimiterAnalyser_Sharp	access:public	signature:(TokenKind tokenKind)
DelimiterAnalyser_Sharp::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.cpp	/^Stmt* DelimiterAnalyser_Sharp::InnerAnalyze(TokenStream& stream, const Stmt* parent)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser_Sharp	signature:(TokenStream& stream, const Stmt* parent)
DelimiterAnalyser_Sharp::InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser_Sharp	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
DelimiterEnd	.\Lexer\TokenKind.h	/^    DelimiterEnd = Or,$/;"	kind:e	line:91	language:C++	enum:TokenKind
DelimiterStart	.\Lexer\TokenKind.h	/^    DelimiterStart,$/;"	kind:e	line:58	language:C++	enum:TokenKind
Division	.\Lexer\TokenKind.h	/^    Division,$/;"	kind:e	line:84	language:C++	enum:TokenKind
Do	.\Lexer\TokenKind.h	/^    Do,$/;"	kind:e	line:16	language:C++	enum:TokenKind
Dot	.\Lexer\TokenKind.h	/^    Dot,$/;"	kind:e	line:61	language:C++	enum:TokenKind
DoubleQuota	.\Lexer\TokenKind.h	/^    DoubleQuota,$/;"	kind:e	line:74	language:C++	enum:TokenKind
DynamicCast	.\Lexer\TokenKind.h	/^    DynamicCast,$/;"	kind:e	line:52	language:C++	enum:TokenKind
Else	.\Lexer\TokenKind.h	/^    Else,$/;"	kind:e	line:14	language:C++	enum:TokenKind
EndIf	.\Lexer\TokenKind.h	/^    EndIf,$/;"	kind:e	line:32	language:C++	enum:TokenKind
Expr	.\SyntaxParser\Stmt\Expr\Expr.h	/^    Expr(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:8	language:C++	class:Expr	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
Expr	.\SyntaxParser\Stmt\Expr\Expr.h	/^class Expr : public Stmt$/;"	kind:c	line:5	language:C++	inherits:Stmt
Expr.h	.\SyntaxParser\Stmt\Expr\Expr.h	1;"	kind:F	line:1	language:C++
Expr::Expr	.\SyntaxParser\Stmt\Expr\Expr.h	/^    Expr(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:8	language:C++	class:Expr	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
Extern	.\Lexer\TokenKind.h	/^    Extern,$/;"	kind:e	line:27	language:C++	enum:TokenKind
FindMatchingBrace	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindMatchingBrace(TokenKind originKind, int& steps) const$/;"	kind:f	line:154	language:C++	class:TokenStream	signature:(TokenKind originKind, int& steps) const
FindMatchingBrace	.\Lexer\TokenStream.h	/^    const Token* FindMatchingBrace(TokenKind tokenKind, int& steps) const;$/;"	kind:p	line:40	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind, int& steps) const
FindMatchingBrace	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^    this->tokenStream.FindMatchingBrace(LSmallBrace, steps);$/;"	kind:p	line:40	language:C++	file:	signature:(LSmallBrace, steps)
FindNextTargetTokenInSameLine	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindNextTargetTokenInSameLine(TokenKind tokenKind, int& steps) const$/;"	kind:f	line:149	language:C++	class:TokenStream	signature:(TokenKind tokenKind, int& steps) const
FindNextTargetTokenInSameLine	.\Lexer\TokenStream.h	/^    const Token* FindNextTargetTokenInSameLine(TokenKind tokenKind, int& steps) const;$/;"	kind:p	line:39	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind, int& steps) const
FindNextTargetTokenInSameStmt	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindNextTargetTokenInSameStmt(TokenKind tokenKind, int& steps) const$/;"	kind:f	line:144	language:C++	class:TokenStream	signature:(TokenKind tokenKind, int& steps) const
FindNextTargetTokenInSameStmt	.\Lexer\TokenStream.h	/^    const Token* FindNextTargetTokenInSameStmt(TokenKind tokenKind, int& steps) const;$/;"	kind:p	line:38	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind, int& steps) const
FindTargetTokenInScope	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindTargetTokenInScope(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const$/;"	kind:f	line:245	language:C++	class:TokenStream	signature:(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const
FindTargetTokenInScope	.\Lexer\TokenStream.h	/^    const Token* FindTargetTokenInScope(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const;$/;"	kind:p	line:53	language:C++	class:TokenStream	access:private	signature:(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const
Forward	.\Lexer\TokenStream.h	/^    Forward,$/;"	kind:e	line:11	language:C++	enum:TokenSearchDirection
FuncDefStmt	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    FuncDefStmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:9	language:C++	class:FuncDefStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
FuncDefStmt	.\SyntaxParser\Stmt\FuncDefStmt.h	/^class FuncDefStmt : public Stmt$/;"	kind:c	line:6	language:C++	inherits:Stmt
FuncDefStmt.cpp	.\SyntaxParser\Stmt\FuncDefStmt.cpp	1;"	kind:F	line:1	language:C++
FuncDefStmt.h	.\SyntaxParser\Stmt\FuncDefStmt.h	1;"	kind:F	line:1	language:C++
FuncDefStmt::FuncDefStmt	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    FuncDefStmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:9	language:C++	class:FuncDefStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
FuncDefStmt::GetKind	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:21	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:() const
FuncDefStmt::GetName	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^const wstring FuncDefStmt::GetName() const$/;"	kind:f	line:3	language:C++	class:FuncDefStmt	signature:() const
FuncDefStmt::GetName	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual const wstring GetName() const;$/;"	kind:p	line:25	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:() const
FuncDefStmt::IsMe	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^bool FuncDefStmt::IsMe() const$/;"	kind:f	line:9	language:C++	class:FuncDefStmt	signature:() const
FuncDefStmt::IsMe	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual bool IsMe() const;$/;"	kind:p	line:26	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:() const
FuncDefStmt::Parse	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^Stmt* FuncDefStmt::Parse()$/;"	kind:f	line:64	language:C++	class:FuncDefStmt	signature:()
FuncDefStmt::Parse	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:27	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:()
FuncDefStmt::ParseFuncBody	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^void FuncDefStmt::ParseFuncBody()$/;"	kind:f	line:82	language:C++	class:FuncDefStmt	signature:()
FuncDefStmt::ParseFuncBody	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    void ParseFuncBody();$/;"	kind:p	line:38	language:C++	class:FuncDefStmt	access:private	signature:()
FuncDefStmt::ParseFuncName	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^void FuncDefStmt::ParseFuncName()$/;"	kind:f	line:72	language:C++	class:FuncDefStmt	signature:()
FuncDefStmt::ParseFuncName	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    void ParseFuncName();$/;"	kind:p	line:36	language:C++	class:FuncDefStmt	access:private	signature:()
FuncDefStmt::ParseFuncParams	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^void FuncDefStmt::ParseFuncParams()$/;"	kind:f	line:78	language:C++	class:FuncDefStmt	signature:()
FuncDefStmt::ParseFuncParams	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    void ParseFuncParams();$/;"	kind:p	line:37	language:C++	class:FuncDefStmt	access:private	signature:()
FuncDefStmt::funcBody	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    ComposedStmt* funcBody;$/;"	kind:m	line:31	language:C++	class:FuncDefStmt	access:protected
FuncDefStmt::funcName	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    wstring funcName;$/;"	kind:m	line:30	language:C++	class:FuncDefStmt	access:protected
FuncDefStmt::~FuncDefStmt	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    ~FuncDefStmt()$/;"	kind:f	line:16	language:C++	class:FuncDefStmt	access:public	signature:()
GetChildren	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^const vector<Stmt*> ComposedStmt::GetChildren() const$/;"	kind:f	line:17	language:C++	class:ComposedStmt	signature:() const
GetChildren	.\SyntaxParser\Stmt\ComposedStmt.h	/^    const vector<Stmt*> GetChildren() const;$/;"	kind:p	line:27	language:C++	class:ComposedStmt	access:public	signature:() const
GetContent	.\Lexer\Token.h	/^    const wstring GetContent() const$/;"	kind:f	line:14	language:C++	class:Token	access:public	signature:() const
GetCurrentToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GetCurrentToken() const$/;"	kind:f	line:27	language:C++	class:TokenStream	signature:() const
GetCurrentToken	.\Lexer\TokenStream.h	/^    const Token* GetCurrentToken() const;$/;"	kind:p	line:34	language:C++	class:TokenStream	access:public	signature:() const
GetDepth	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^int StmtVisitor::GetDepth(const Stmt& stmt) const$/;"	kind:f	line:37	language:C++	class:StmtVisitor	signature:(const Stmt& stmt) const
GetDepth	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    int GetDepth(const Stmt&) const;$/;"	kind:p	line:13	language:C++	class:StmtVisitor	access:protected	signature:(const Stmt&) const
GetFilePath	.\Lexer\TokenStream.h	/^    const wstring GetFilePath() const$/;"	kind:f	line:28	language:C++	class:TokenStream	access:public	signature:() const
GetId	.\SyntaxParser\Symbol\Symbol.h	/^    const wstring GetId();$/;"	kind:p	line:10	language:C++	class:Type	access:public	signature:()
GetKind	.\Lexer\Token.cpp	/^TokenKind Token::GetKind() const$/;"	kind:f	line:27	language:C++	class:Token	signature:() const
GetKind	.\Lexer\Token.h	/^    TokenKind GetKind() const;$/;"	kind:p	line:13	language:C++	class:Token	access:public	signature:() const
GetKind	.\Lexer\TokenKind.cpp	/^TokenKind TokenMatcher::GetKind(_TCHAR token) const$/;"	kind:f	line:122	language:C++	class:TokenMatcher	signature:(_TCHAR token) const
GetKind	.\Lexer\TokenKind.cpp	/^TokenKind TokenMatcher::GetKind(const _TCHAR* token) const$/;"	kind:f	line:109	language:C++	class:TokenMatcher	signature:(const _TCHAR* token) const
GetKind	.\Lexer\TokenKind.h	/^    TokenKind GetKind(_TCHAR token) const;$/;"	kind:p	line:111	language:C++	class:TokenMatcher	access:public	signature:(_TCHAR token) const
GetKind	.\Lexer\TokenKind.h	/^    TokenKind GetKind(const _TCHAR* token) const;$/;"	kind:p	line:110	language:C++	class:TokenMatcher	access:public	signature:(const _TCHAR* token) const
GetKind	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:15	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:() const
GetKind	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:21	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:() const
GetKind	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:10	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:() const
GetKind	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:12	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:() const
GetKind	.\SyntaxParser\Stmt\Stmt.h	/^    virtual const StmtKind GetKind() const = 0;$/;"	kind:p	line:24	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:() const
GetKind	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:16	language:C++	class:TopLevelStmt	access:public	implementation:virtual	signature:() const
GetMe	.\Lexer\TokenKind.cpp	/^const TokenMatcher& TokenMatcher::GetMe()$/;"	kind:f	line:5	language:C++	class:TokenMatcher	signature:()
GetMe	.\Lexer\TokenKind.h	/^    static const TokenMatcher& GetMe();$/;"	kind:p	line:106	language:C++	class:TokenMatcher	access:public	signature:()
GetMe	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory& DelimiterAnalyserFactory::GetMe()$/;"	kind:f	line:10	language:C++	class:DelimiterAnalyserFactory	signature:()
GetMe	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    static DelimiterAnalyserFactory& GetMe();$/;"	kind:p	line:11	language:C++	class:DelimiterAnalyserFactory	access:public	signature:()
GetMe	.\SyntaxParser\Symbol\SymbolTable.h	/^    static TypeTable& GetMe();$/;"	kind:p	line:7	language:C++	class:TypeTable	access:public	signature:()
GetName	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^const wstring ComposedStmt::GetName() const$/;"	kind:f	line:22	language:C++	class:ComposedStmt	signature:() const
GetName	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual const wstring GetName() const;$/;"	kind:p	line:19	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:() const
GetName	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^const wstring FuncDefStmt::GetName() const$/;"	kind:f	line:3	language:C++	class:FuncDefStmt	signature:() const
GetName	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual const wstring GetName() const;$/;"	kind:p	line:25	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:() const
GetName	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^const wstring IncludeStmt::GetName() const$/;"	kind:f	line:8	language:C++	class:IncludeStmt	signature:() const
GetName	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual const wstring GetName() const;$/;"	kind:p	line:14	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:() const
GetName	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual const wstring GetName() const$/;"	kind:f	line:16	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:() const
GetName	.\SyntaxParser\Stmt\Stmt.h	/^    virtual const wstring GetName() const = 0;$/;"	kind:p	line:23	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:() const
GetName	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    virtual const wstring GetName() const$/;"	kind:f	line:20	language:C++	class:TopLevelStmt	access:public	implementation:virtual	signature:() const
GetName	.\SyntaxParser\Symbol\Symbol.h	/^    const wstring GetName();$/;"	kind:p	line:9	language:C++	class:Type	access:public	signature:()
GetParent	.\SyntaxParser\Stmt\Stmt.cpp	/^const Stmt* Stmt::GetParent() const$/;"	kind:f	line:8	language:C++	class:Stmt	signature:() const
GetParent	.\SyntaxParser\Stmt\Stmt.h	/^    const Stmt* GetParent() const;$/;"	kind:p	line:27	language:C++	class:Stmt	access:public	signature:() const
GetToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GetToken(int index) const$/;"	kind:f	line:37	language:C++	class:TokenStream	signature:(int index) const
GetToken	.\Lexer\TokenStream.h	/^    const Token* GetToken(int index) const;$/;"	kind:p	line:56	language:C++	class:TokenStream	access:private	signature:(int index) const
GetTokenByRelativePos	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GetTokenByRelativePos(int pos) const$/;"	kind:f	line:32	language:C++	class:TokenStream	signature:(int pos) const
GetTokenByRelativePos	.\Lexer\TokenStream.h	/^    const Token* GetTokenByRelativePos(int pos) const;$/;"	kind:p	line:35	language:C++	class:TokenStream	access:public	signature:(int pos) const
GotoEol	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoEol()$/;"	kind:f	line:305	language:C++	class:TokenStream	signature:()
GotoEol	.\Lexer\TokenStream.h	/^    const Token* GotoEol();$/;"	kind:p	line:49	language:C++	class:TokenStream	access:public	signature:()
GotoEol	.\SyntaxParser\Stmt\LineCommentStmt.cpp	/^    this->tokenStream.GotoEol();$/;"	kind:p	line:12	language:C++	file:	signature:()
GotoMatchingBrace	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoMatchingBrace(TokenKind kind)$/;"	kind:f	line:234	language:C++	class:TokenStream	signature:(TokenKind kind)
GotoMatchingBrace	.\Lexer\TokenStream.h	/^    const Token* GotoMatchingBrace(TokenKind kind);$/;"	kind:p	line:50	language:C++	class:TokenStream	access:public	signature:(TokenKind kind)
GotoNextTargetTokenInSameLine	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoNextTargetTokenInSameLine(TokenKind tokenKind)$/;"	kind:f	line:291	language:C++	class:TokenStream	signature:(TokenKind tokenKind)
GotoNextTargetTokenInSameLine	.\Lexer\TokenStream.h	/^    const Token* GotoNextTargetTokenInSameLine(TokenKind tokenKind);$/;"	kind:p	line:48	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind)
GotoNextTargetTokenInSameStmt	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoNextTargetTokenInSameStmt(TokenKind tokenKind)$/;"	kind:f	line:277	language:C++	class:TokenStream	signature:(TokenKind tokenKind)
GotoNextTargetTokenInSameStmt	.\Lexer\TokenStream.h	/^    const Token* GotoNextTargetTokenInSameStmt(TokenKind tokenKind);$/;"	kind:p	line:47	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind)
GotoNextToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoNextToken()$/;"	kind:f	line:49	language:C++	class:TokenStream	signature:()
GotoNextToken	.\Lexer\TokenStream.h	/^    const Token* GotoNextToken();$/;"	kind:p	line:44	language:C++	class:TokenStream	access:public	signature:()
GotoPrevToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoPrevToken()$/;"	kind:f	line:55	language:C++	class:TokenStream	signature:()
GotoPrevToken	.\Lexer\TokenStream.h	/^    const Token* GotoPrevToken();$/;"	kind:p	line:45	language:C++	class:TokenStream	access:public	signature:()
GotoStart	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoStart()$/;"	kind:f	line:21	language:C++	class:TokenStream	signature:()
GotoStart	.\Lexer\TokenStream.h	/^    const Token* GotoStart();$/;"	kind:p	line:43	language:C++	class:TokenStream	access:public	signature:()
GotoStart	.\SyntaxParser\Ast\AstParser.cpp	/^    this->tokenStream.GotoStart();$/;"	kind:p	line:21	language:C++	file:	signature:()
GotoTokenByRelativePos	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoTokenByRelativePos(int pos)$/;"	kind:f	line:61	language:C++	class:TokenStream	signature:(int pos)
GotoTokenByRelativePos	.\Lexer\TokenStream.h	/^    const Token* GotoTokenByRelativePos(int pos);$/;"	kind:p	line:46	language:C++	class:TokenStream	access:public	signature:(int pos)
Gt	.\Lexer\TokenKind.h	/^    Gt,$/;"	kind:e	line:85	language:C++	enum:TokenKind
Identifier	.\Lexer\TokenKind.h	/^    Identifier,$/;"	kind:e	line:97	language:C++	enum:TokenKind
If	.\Lexer\TokenKind.h	/^    If,$/;"	kind:e	line:13	language:C++	enum:TokenKind
IfnDef	.\Lexer\TokenKind.h	/^    IfnDef,$/;"	kind:e	line:30	language:C++	enum:TokenKind
Include	.\Lexer\TokenKind.h	/^    Include,$/;"	kind:e	line:33	language:C++	enum:TokenKind
IncludeStmt	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^IncludeStmt::IncludeStmt(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:3	language:C++	class:IncludeStmt	signature:(TokenStream& tokenStream, const Stmt* parent)
IncludeStmt	.\SyntaxParser\Stmt\IncludeStmt.h	/^    IncludeStmt(TokenStream &tokenStream, const Stmt* parent);$/;"	kind:p	line:9	language:C++	class:IncludeStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
IncludeStmt	.\SyntaxParser\Stmt\IncludeStmt.h	/^class IncludeStmt : public Stmt$/;"	kind:c	line:6	language:C++	inherits:Stmt
IncludeStmt.cpp	.\SyntaxParser\Stmt\IncludeStmt.cpp	1;"	kind:F	line:1	language:C++
IncludeStmt.h	.\SyntaxParser\Stmt\IncludeStmt.h	1;"	kind:F	line:1	language:C++
IncludeStmt::GetKind	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:10	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:() const
IncludeStmt::GetName	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^const wstring IncludeStmt::GetName() const$/;"	kind:f	line:8	language:C++	class:IncludeStmt	signature:() const
IncludeStmt::GetName	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual const wstring GetName() const;$/;"	kind:p	line:14	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:() const
IncludeStmt::IncludeStmt	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^IncludeStmt::IncludeStmt(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:3	language:C++	class:IncludeStmt	signature:(TokenStream& tokenStream, const Stmt* parent)
IncludeStmt::IncludeStmt	.\SyntaxParser\Stmt\IncludeStmt.h	/^    IncludeStmt(TokenStream &tokenStream, const Stmt* parent);$/;"	kind:p	line:9	language:C++	class:IncludeStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
IncludeStmt::IsMe	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^bool IncludeStmt::IsMe() const$/;"	kind:f	line:15	language:C++	class:IncludeStmt	signature:() const
IncludeStmt::IsMe	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual bool IsMe() const;$/;"	kind:p	line:15	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:() const
IncludeStmt::Parse	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^Stmt* IncludeStmt::Parse()$/;"	kind:f	line:21	language:C++	class:IncludeStmt	signature:()
IncludeStmt::Parse	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:16	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:()
IncludeStmt::includedFile	.\SyntaxParser\Stmt\IncludeStmt.h	/^    wstring includedFile;$/;"	kind:m	line:19	language:C++	class:IncludeStmt	access:protected
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	/^Stmt* DelimiterAnalyser::InnerAnalyze(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:20	language:C++	class:DelimiterAnalyser	signature:(TokenStream& tokenStream, const Stmt* parent)
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.cpp	/^Stmt* DelimiterAnalyser_Division::InnerAnalyze(TokenStream& stream, const Stmt* parent)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser_Division	signature:(TokenStream& stream, const Stmt* parent)
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser_Division	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.cpp	/^Stmt* DelimiterAnalyser_LSmallBrace::InnerAnalyze(TokenStream& stream, const Stmt* parent)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser_LSmallBrace	signature:(TokenStream& stream, const Stmt* parent)
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser_LSmallBrace	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.cpp	/^Stmt* DelimiterAnalyser_Sharp::InnerAnalyze(TokenStream& stream, const Stmt* parent)$/;"	kind:f	line:4	language:C++	class:DelimiterAnalyser_Sharp	signature:(TokenStream& stream, const Stmt* parent)
InnerAnalyze	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.h	/^    virtual Stmt* InnerAnalyze(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:14	language:C++	class:DelimiterAnalyser_Sharp	access:protected	implementation:virtual	signature:(TokenStream& tokenStream, const Stmt* parent)
Int	.\Lexer\TokenKind.h	/^    Int,$/;"	kind:e	line:46	language:C++	enum:TokenKind
IsBuiltInType	.\Lexer\TokenKind.h	/^    bool IsBuiltInType(TokenKind kind) const$/;"	kind:f	line:116	language:C++	class:TokenMatcher	access:public	signature:(TokenKind kind) const
IsDelimiter	.\Lexer\TokenKind.h	/^    bool IsDelimiter(TokenKind tokenKind) const$/;"	kind:f	line:112	language:C++	class:TokenMatcher	access:public	signature:(TokenKind tokenKind) const
IsIdentifier	.\Lexer\TokenKind.h	/^    bool IsIdentifier(TokenKind kind) const$/;"	kind:f	line:120	language:C++	class:TokenMatcher	access:public	signature:(TokenKind kind) const
IsMe	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual bool IsMe() const$/;"	kind:f	line:20	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:() const
IsMe	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^bool FuncDefStmt::IsMe() const$/;"	kind:f	line:9	language:C++	class:FuncDefStmt	signature:() const
IsMe	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual bool IsMe() const;$/;"	kind:p	line:26	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:() const
IsMe	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^bool IncludeStmt::IsMe() const$/;"	kind:f	line:15	language:C++	class:IncludeStmt	signature:() const
IsMe	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual bool IsMe() const;$/;"	kind:p	line:15	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:() const
IsMe	.\SyntaxParser\Stmt\LineCommentStmt.cpp	/^bool LineCommentStmt::IsMe() const$/;"	kind:f	line:4	language:C++	class:LineCommentStmt	signature:() const
IsMe	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual bool IsMe() const;$/;"	kind:p	line:20	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:() const
IsMe	.\SyntaxParser\Stmt\Stmt.h	/^    virtual bool IsMe() const = 0;$/;"	kind:p	line:25	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:() const
LLargeBrace	.\Lexer\TokenKind.h	/^    LLargeBrace,$/;"	kind:e	line:69	language:C++	enum:TokenKind
LMiddleBrace	.\Lexer\TokenKind.h	/^    LMiddleBrace,$/;"	kind:e	line:67	language:C++	enum:TokenKind
LSmallBrace	.\Lexer\TokenKind.h	/^    LSmallBrace,$/;"	kind:e	line:65	language:C++	enum:TokenKind
LexerTest	.\Test\LexerTest.cpp	/^void LexerTest()$/;"	kind:f	line:9	language:C++	signature:()
LexerTest.cpp	.\Test\LexerTest.cpp	1;"	kind:F	line:1	language:C++
LineCommentStmt	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    LineCommentStmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:8	language:C++	class:LineCommentStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
LineCommentStmt	.\SyntaxParser\Stmt\LineCommentStmt.h	/^class LineCommentStmt : public Stmt$/;"	kind:c	line:5	language:C++	inherits:Stmt
LineCommentStmt.cpp	.\SyntaxParser\Stmt\LineCommentStmt.cpp	1;"	kind:F	line:1	language:C++
LineCommentStmt.h	.\SyntaxParser\Stmt\LineCommentStmt.h	1;"	kind:F	line:1	language:C++
LineCommentStmt::GetKind	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:12	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:() const
LineCommentStmt::GetName	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual const wstring GetName() const$/;"	kind:f	line:16	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:() const
LineCommentStmt::IsMe	.\SyntaxParser\Stmt\LineCommentStmt.cpp	/^bool LineCommentStmt::IsMe() const$/;"	kind:f	line:4	language:C++	class:LineCommentStmt	signature:() const
LineCommentStmt::IsMe	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual bool IsMe() const;$/;"	kind:p	line:20	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:() const
LineCommentStmt::LineCommentStmt	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    LineCommentStmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:8	language:C++	class:LineCommentStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
LineCommentStmt::Parse	.\SyntaxParser\Stmt\LineCommentStmt.cpp	/^Stmt* LineCommentStmt::Parse()$/;"	kind:f	line:10	language:C++	class:LineCommentStmt	signature:()
LineCommentStmt::Parse	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:21	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:()
LineCommenter	.\Lexer\TokenKind.h	/^    LineCommenter,$/;"	kind:e	line:77	language:C++	enum:TokenKind
Location	.\Basic\Location.h	/^    Location()$/;"	kind:f	line:13	language:C++	class:Location	access:public	signature:()
Location	.\Basic\Location.h	/^    Location(int row, int column)$/;"	kind:f	line:7	language:C++	class:Location	access:public	signature:(int row, int column)
Location	.\Basic\Location.h	/^class Location$/;"	kind:c	line:4	language:C++
Location.h	.\Basic\Location.h	1;"	kind:F	line:1	language:C++
Location::Column	.\Basic\Location.h	/^    int Column;$/;"	kind:m	line:19	language:C++	class:Location	access:public
Location::Location	.\Basic\Location.h	/^    Location()$/;"	kind:f	line:13	language:C++	class:Location	access:public	signature:()
Location::Location	.\Basic\Location.h	/^    Location(int row, int column)$/;"	kind:f	line:7	language:C++	class:Location	access:public	signature:(int row, int column)
Location::Row	.\Basic\Location.h	/^    int Row;$/;"	kind:m	line:18	language:C++	class:Location	access:public
Long	.\Lexer\TokenKind.h	/^    Long,$/;"	kind:e	line:47	language:C++	enum:TokenKind
Lt	.\Lexer\TokenKind.h	/^    Lt,$/;"	kind:e	line:86	language:C++	enum:TokenKind
Minus	.\Lexer\TokenKind.h	/^    Minus,$/;"	kind:e	line:82	language:C++	enum:TokenKind
Multiple	.\Lexer\TokenKind.h	/^    Multiple,$/;"	kind:e	line:83	language:C++	enum:TokenKind
NewLine	.\Lexer\TokenKind.h	/^    NewLine,$/;"	kind:e	line:64	language:C++	enum:TokenKind
NewLineChar	.\Basic\Common.cpp	/^const _TCHAR NewLineChar = '\\n';$/;"	kind:v	line:4	language:C++
NewLineChar	.\Basic\Common.h	/^extern const _TCHAR NewLineChar;$/;"	kind:x	line:13	language:C++
NewLineStr	.\Basic\Common.cpp	/^const _TCHAR* NewLineStr = _T("\\n");$/;"	kind:v	line:3	language:C++
NewLineStr	.\Basic\Common.h	/^extern const _TCHAR* NewLineStr;$/;"	kind:x	line:12	language:C++
Or	.\Lexer\TokenKind.h	/^    Or,$/;"	kind:e	line:90	language:C++	enum:TokenKind
OrOr	.\Lexer\TokenKind.h	/^    OrOr,$/;"	kind:e	line:95	language:C++	enum:TokenKind
Parse	.\SyntaxParser\Ast\AstParser.cpp	/^ComposedStmt* AstParser::Parse()$/;"	kind:f	line:19	language:C++	class:AstParser	signature:()
Parse	.\SyntaxParser\Ast\AstParser.h	/^    ComposedStmt* Parse();$/;"	kind:p	line:10	language:C++	class:AstParser	access:public	signature:()
Parse	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^Stmt* ComposedStmt::Parse()$/;"	kind:f	line:27	language:C++	class:ComposedStmt	signature:()
Parse	.\SyntaxParser\Stmt\ComposedStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:24	language:C++	class:ComposedStmt	access:public	implementation:virtual	signature:()
Parse	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^Stmt* FuncDefStmt::Parse()$/;"	kind:f	line:64	language:C++	class:FuncDefStmt	signature:()
Parse	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:27	language:C++	class:FuncDefStmt	access:public	implementation:virtual	signature:()
Parse	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^Stmt* IncludeStmt::Parse()$/;"	kind:f	line:21	language:C++	class:IncludeStmt	signature:()
Parse	.\SyntaxParser\Stmt\IncludeStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:16	language:C++	class:IncludeStmt	access:public	implementation:virtual	signature:()
Parse	.\SyntaxParser\Stmt\LineCommentStmt.cpp	/^Stmt* LineCommentStmt::Parse()$/;"	kind:f	line:10	language:C++	class:LineCommentStmt	signature:()
Parse	.\SyntaxParser\Stmt\LineCommentStmt.h	/^    virtual Stmt* Parse();$/;"	kind:p	line:21	language:C++	class:LineCommentStmt	access:public	implementation:virtual	signature:()
Parse	.\SyntaxParser\Stmt\Stmt.h	/^    virtual Stmt* Parse() = 0;$/;"	kind:p	line:26	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:()
ParseFile	.\Lexer\TokenStream.cpp	/^void TokenStream::ParseFile()$/;"	kind:f	line:67	language:C++	class:TokenStream	signature:()
ParseFile	.\Lexer\TokenStream.h	/^    void ParseFile();$/;"	kind:p	line:27	language:C++	class:TokenStream	access:public	signature:()
ParseFuncBody	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^void FuncDefStmt::ParseFuncBody()$/;"	kind:f	line:82	language:C++	class:FuncDefStmt	signature:()
ParseFuncBody	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    void ParseFuncBody();$/;"	kind:p	line:38	language:C++	class:FuncDefStmt	access:private	signature:()
ParseFuncName	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^void FuncDefStmt::ParseFuncName()$/;"	kind:f	line:72	language:C++	class:FuncDefStmt	signature:()
ParseFuncName	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    void ParseFuncName();$/;"	kind:p	line:36	language:C++	class:FuncDefStmt	access:private	signature:()
ParseFuncParams	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^void FuncDefStmt::ParseFuncParams()$/;"	kind:f	line:78	language:C++	class:FuncDefStmt	signature:()
ParseFuncParams	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    void ParseFuncParams();$/;"	kind:p	line:37	language:C++	class:FuncDefStmt	access:private	signature:()
ParseKind	.\Lexer\Token.cpp	/^void Token::ParseKind()$/;"	kind:f	line:22	language:C++	class:Token	signature:()
ParseKind	.\Lexer\Token.h	/^    void ParseKind();$/;"	kind:p	line:20	language:C++	class:Token	access:private	signature:()
Plus	.\Lexer\TokenKind.h	/^    Plus,$/;"	kind:e	line:81	language:C++	enum:TokenKind
Print	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^const wstring AstPrinter::Print(const Stmt& stmt) const$/;"	kind:f	line:3	language:C++	class:AstPrinter	signature:(const Stmt& stmt) const
Print	.\SyntaxParser\StmtVisitor\AstPrinter.h	/^    const wstring Print(const Stmt&) const;$/;"	kind:p	line:12	language:C++	class:AstPrinter	access:private	signature:(const Stmt&) const
Private	.\Lexer\TokenKind.h	/^    Private,$/;"	kind:e	line:20	language:C++	enum:TokenKind
Protected	.\Lexer\TokenKind.h	/^    Protected,$/;"	kind:e	line:21	language:C++	enum:TokenKind
Public	.\Lexer\TokenKind.h	/^    Public,$/;"	kind:e	line:19	language:C++	enum:TokenKind
QuestionMark	.\Lexer\TokenKind.h	/^    QuestionMark,$/;"	kind:e	line:87	language:C++	enum:TokenKind
RLargeBrace	.\Lexer\TokenKind.h	/^    RLargeBrace,$/;"	kind:e	line:70	language:C++	enum:TokenKind
RMiddleBrace	.\Lexer\TokenKind.h	/^    RMiddleBrace,$/;"	kind:e	line:68	language:C++	enum:TokenKind
RSmallBrace	.\Lexer\TokenKind.h	/^    RSmallBrace,$/;"	kind:e	line:66	language:C++	enum:TokenKind
ReinterpretCast	.\Lexer\TokenKind.h	/^    ReinterpretCast,$/;"	kind:e	line:53	language:C++	enum:TokenKind
Release	.\Lexer\TokenKind.cpp	/^void TokenMatcher::Release()$/;"	kind:f	line:15	language:C++	class:TokenMatcher	signature:()
Release	.\Lexer\TokenKind.h	/^    static void Release();$/;"	kind:p	line:107	language:C++	class:TokenMatcher	access:public	signature:()
Release	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^void DelimiterAnalyserFactory::Release()$/;"	kind:f	line:20	language:C++	class:DelimiterAnalyserFactory	signature:()
Release	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    static void Release();$/;"	kind:p	line:12	language:C++	class:DelimiterAnalyserFactory	access:public	signature:()
Release	.\SyntaxParser\Symbol\SymbolTable.h	/^    static void Release();$/;"	kind:p	line:8	language:C++	class:TypeTable	access:public	signature:()
Row	.\Basic\Location.h	/^    int Row;$/;"	kind:m	line:18	language:C++	class:Location	access:public
SK_BlockCommentStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_BlockCommentStmt,$/;"	kind:e	line:8	language:C++	enum:StmtKind
SK_ClassStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_ClassStmt,$/;"	kind:e	line:13	language:C++	enum:StmtKind
SK_FuncBodyStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_FuncBodyStmt,$/;"	kind:e	line:15	language:C++	enum:StmtKind
SK_FuncDefStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_FuncDefStmt,$/;"	kind:e	line:14	language:C++	enum:StmtKind
SK_IfStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_IfStmt,$/;"	kind:e	line:11	language:C++	enum:StmtKind
SK_IncludeStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_IncludeStmt,$/;"	kind:e	line:9	language:C++	enum:StmtKind
SK_LineCommentStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_LineCommentStmt,$/;"	kind:e	line:7	language:C++	enum:StmtKind
SK_TopLevelStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_TopLevelStmt,$/;"	kind:e	line:12	language:C++	enum:StmtKind
SK_WhileStmt	.\SyntaxParser\Stmt\Stmt.h	/^    SK_WhileStmt,$/;"	kind:e	line:10	language:C++	enum:StmtKind
SameLine	.\Lexer\TokenStream.h	/^    SameLine,$/;"	kind:e	line:17	language:C++	enum:TokenSearchScope
SameStmt	.\Lexer\TokenStream.h	/^    SameStmt,$/;"	kind:e	line:18	language:C++	enum:TokenSearchScope
Semicolon	.\Lexer\TokenKind.h	/^    Semicolon,$/;"	kind:e	line:60	language:C++	enum:TokenKind
Sharp	.\Lexer\TokenKind.h	/^    Sharp,$/;"	kind:e	line:71	language:C++	enum:TokenKind
Short	.\Lexer\TokenKind.h	/^    Short,$/;"	kind:e	line:43	language:C++	enum:TokenKind
SingleQuota	.\Lexer\TokenKind.h	/^    SingleQuota,$/;"	kind:e	line:75	language:C++	enum:TokenKind
SkipWhitespaces	.\Lexer\TokenStream.cpp	/^void TokenStream::SkipWhitespaces(const wstring &stream, int &pos, int &spaceCount, int &tabCount)$/;"	kind:f	line:120	language:C++	class:TokenStream	signature:(const wstring &stream, int &pos, int &spaceCount, int &tabCount)
SkipWhitespaces	.\Lexer\TokenStream.h	/^    void SkipWhitespaces(const wstring &stream, int &pos, int &spaceCount, int &tabCount);$/;"	kind:p	line:55	language:C++	class:TokenStream	access:private	signature:(const wstring &stream, int &pos, int &spaceCount, int &tabCount)
Space	.\Lexer\TokenKind.h	/^    Space,$/;"	kind:e	line:62	language:C++	enum:TokenKind
SpaceWidth	.\Basic\Common.cpp	/^const int SpaceWidth = 1;$/;"	kind:v	line:5	language:C++
SpaceWidth	.\Basic\Common.h	/^extern const int SpaceWidth;$/;"	kind:x	line:14	language:C++
Static	.\Lexer\TokenKind.h	/^    Static,$/;"	kind:e	line:25	language:C++	enum:TokenKind
StaticCast	.\Lexer\TokenKind.h	/^    StaticCast,$/;"	kind:e	line:51	language:C++	enum:TokenKind
StlTest	.\Test\StlTest.cpp	/^void StlTest()$/;"	kind:f	line:25	language:C++	signature:()
StlTest	.\Test\Test.cpp	/^extern void StlTest();$/;"	kind:p	line:6	language:C++	file:	signature:()
StlTest.cpp	.\Test\StlTest.cpp	1;"	kind:F	line:1	language:C++
Stmt	.\SyntaxParser\Stmt\Stmt.cpp	/^Stmt::Stmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:3	language:C++	class:Stmt	signature:(TokenStream &tokenStream, const Stmt* parent)
Stmt	.\SyntaxParser\Stmt\Stmt.h	/^    Stmt(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:21	language:C++	class:Stmt	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
Stmt	.\SyntaxParser\Stmt\Stmt.h	/^class Stmt$/;"	kind:c	line:18	language:C++
Stmt.cpp	.\SyntaxParser\Stmt\Stmt.cpp	1;"	kind:F	line:1	language:C++
Stmt.h	.\SyntaxParser\Stmt\Stmt.h	1;"	kind:F	line:1	language:C++
Stmt::GetKind	.\SyntaxParser\Stmt\Stmt.h	/^    virtual const StmtKind GetKind() const = 0;$/;"	kind:p	line:24	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:() const
Stmt::GetName	.\SyntaxParser\Stmt\Stmt.h	/^    virtual const wstring GetName() const = 0;$/;"	kind:p	line:23	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:() const
Stmt::GetParent	.\SyntaxParser\Stmt\Stmt.cpp	/^const Stmt* Stmt::GetParent() const$/;"	kind:f	line:8	language:C++	class:Stmt	signature:() const
Stmt::GetParent	.\SyntaxParser\Stmt\Stmt.h	/^    const Stmt* GetParent() const;$/;"	kind:p	line:27	language:C++	class:Stmt	access:public	signature:() const
Stmt::IsMe	.\SyntaxParser\Stmt\Stmt.h	/^    virtual bool IsMe() const = 0;$/;"	kind:p	line:25	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:() const
Stmt::Parse	.\SyntaxParser\Stmt\Stmt.h	/^    virtual Stmt* Parse() = 0;$/;"	kind:p	line:26	language:C++	class:Stmt	access:public	implementation:pure virtual	signature:()
Stmt::Stmt	.\SyntaxParser\Stmt\Stmt.cpp	/^Stmt::Stmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:3	language:C++	class:Stmt	signature:(TokenStream &tokenStream, const Stmt* parent)
Stmt::Stmt	.\SyntaxParser\Stmt\Stmt.h	/^    Stmt(TokenStream& tokenStream, const Stmt* parent);$/;"	kind:p	line:21	language:C++	class:Stmt	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
Stmt::parent	.\SyntaxParser\Stmt\Stmt.h	/^    const Stmt* parent;$/;"	kind:m	line:31	language:C++	class:Stmt	access:protected
Stmt::tokenStream	.\SyntaxParser\Stmt\Stmt.h	/^    TokenStream &tokenStream;$/;"	kind:m	line:30	language:C++	class:Stmt	access:protected
StmtKind	.\SyntaxParser\Stmt\Stmt.h	/^enum StmtKind$/;"	kind:g	line:5	language:C++
StmtVisitor	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^class StmtVisitor$/;"	kind:c	line:7	language:C++
StmtVisitor.cpp	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	1;"	kind:F	line:1	language:C++
StmtVisitor.h	.\SyntaxParser\StmtVisitor\StmtVisitor.h	1;"	kind:F	line:1	language:C++
StmtVisitor::GetDepth	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^int StmtVisitor::GetDepth(const Stmt& stmt) const$/;"	kind:f	line:37	language:C++	class:StmtVisitor	signature:(const Stmt& stmt) const
StmtVisitor::GetDepth	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    int GetDepth(const Stmt&) const;$/;"	kind:p	line:13	language:C++	class:StmtVisitor	access:protected	signature:(const Stmt&) const
StmtVisitor::Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^void StmtVisitor::Visit(const Stmt* stmt)$/;"	kind:f	line:4	language:C++	class:StmtVisitor	signature:(const Stmt* stmt)
StmtVisitor::Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    virtual void Visit(const ComposedStmt &) = 0;$/;"	kind:p	line:16	language:C++	class:StmtVisitor	access:protected	implementation:pure virtual	signature:(const ComposedStmt &)
StmtVisitor::Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    virtual void Visit(const IncludeStmt &) = 0;$/;"	kind:p	line:15	language:C++	class:StmtVisitor	access:protected	implementation:pure virtual	signature:(const IncludeStmt &)
StmtVisitor::Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    void Visit(const Stmt *);$/;"	kind:p	line:10	language:C++	class:StmtVisitor	access:public	signature:(const Stmt *)
Struct	.\Lexer\TokenKind.h	/^    Struct,$/;"	kind:e	line:38	language:C++	enum:TokenKind
Symbol.h	.\SyntaxParser\Symbol\Symbol.h	1;"	kind:F	line:1	language:C++
SymbolTable.h	.\SyntaxParser\Symbol\SymbolTable.h	1;"	kind:F	line:1	language:C++
Tab	.\Lexer\TokenKind.h	/^    Tab,$/;"	kind:e	line:63	language:C++	enum:TokenKind
TabWidth	.\Basic\Common.cpp	/^const int TabWidth = 4;$/;"	kind:v	line:6	language:C++
TabWidth	.\Basic\Common.h	/^extern const int TabWidth;$/;"	kind:x	line:15	language:C++
Test.cpp	.\Test\Test.cpp	1;"	kind:F	line:1	language:C++
Token	.\Lexer\Token.cpp	/^Token::Token(const _TCHAR *content, Location location)$/;"	kind:f	line:11	language:C++	class:Token	signature:(const _TCHAR *content, Location location)
Token	.\Lexer\Token.cpp	/^Token::Token(const _TCHAR* content)$/;"	kind:f	line:5	language:C++	class:Token	signature:(const _TCHAR* content)
Token	.\Lexer\Token.h	/^	Token(const _TCHAR*);$/;"	kind:p	line:10	language:C++	class:Token	access:public	signature:(const _TCHAR*)
Token	.\Lexer\Token.h	/^    Token(const _TCHAR *content, Location location);$/;"	kind:p	line:11	language:C++	class:Token	access:public	signature:(const _TCHAR *content, Location location)
Token	.\Lexer\Token.h	/^class Token$/;"	kind:c	line:7	language:C++
Token	.\Lexer\TokenStream.h	/^class Token;$/;"	kind:x	line:8	language:C++
Token.cpp	.\Lexer\Token.cpp	1;"	kind:F	line:1	language:C++
Token.h	.\Lexer\Token.h	1;"	kind:F	line:1	language:C++
Token::GetContent	.\Lexer\Token.h	/^    const wstring GetContent() const$/;"	kind:f	line:14	language:C++	class:Token	access:public	signature:() const
Token::GetKind	.\Lexer\Token.cpp	/^TokenKind Token::GetKind() const$/;"	kind:f	line:27	language:C++	class:Token	signature:() const
Token::GetKind	.\Lexer\Token.h	/^    TokenKind GetKind() const;$/;"	kind:p	line:13	language:C++	class:Token	access:public	signature:() const
Token::ParseKind	.\Lexer\Token.cpp	/^void Token::ParseKind()$/;"	kind:f	line:22	language:C++	class:Token	signature:()
Token::ParseKind	.\Lexer\Token.h	/^    void ParseKind();$/;"	kind:p	line:20	language:C++	class:Token	access:private	signature:()
Token::Token	.\Lexer\Token.cpp	/^Token::Token(const _TCHAR *content, Location location)$/;"	kind:f	line:11	language:C++	class:Token	signature:(const _TCHAR *content, Location location)
Token::Token	.\Lexer\Token.cpp	/^Token::Token(const _TCHAR* content)$/;"	kind:f	line:5	language:C++	class:Token	signature:(const _TCHAR* content)
Token::Token	.\Lexer\Token.h	/^	Token(const _TCHAR*);$/;"	kind:p	line:10	language:C++	class:Token	access:public	signature:(const _TCHAR*)
Token::Token	.\Lexer\Token.h	/^    Token(const _TCHAR *content, Location location);$/;"	kind:p	line:11	language:C++	class:Token	access:public	signature:(const _TCHAR *content, Location location)
Token::content	.\Lexer\Token.h	/^    wstring content;$/;"	kind:m	line:25	language:C++	class:Token	access:private
Token::kind	.\Lexer\Token.h	/^    TokenKind kind;$/;"	kind:m	line:23	language:C++	class:Token	access:private
Token::location	.\Lexer\Token.h	/^    Location location;$/;"	kind:m	line:24	language:C++	class:Token	access:private
Token::~Token	.\Lexer\Token.cpp	/^Token::~Token()$/;"	kind:f	line:18	language:C++	class:Token	signature:()
Token::~Token	.\Lexer\Token.h	/^	~Token();$/;"	kind:p	line:12	language:C++	class:Token	access:public	signature:()
TokenKind	.\Lexer\Token.h	/^enum TokenKind;$/;"	kind:x	line:5	language:C++
TokenKind	.\Lexer\TokenKind.h	/^enum TokenKind$/;"	kind:g	line:8	language:C++
TokenKind.cpp	.\Lexer\TokenKind.cpp	1;"	kind:F	line:1	language:C++
TokenKind.h	.\Lexer\TokenKind.h	1;"	kind:F	line:1	language:C++
TokenKindEnd	.\Lexer\TokenKind.h	/^    TokenKindEnd,$/;"	kind:e	line:99	language:C++	enum:TokenKind
TokenKindStart	.\Lexer\TokenKind.h	/^    TokenKindStart,$/;"	kind:e	line:10	language:C++	enum:TokenKind
TokenMatcher	.\Lexer\TokenKind.cpp	/^TokenMatcher::TokenMatcher()$/;"	kind:f	line:20	language:C++	class:TokenMatcher	signature:()
TokenMatcher	.\Lexer\TokenKind.h	/^    TokenMatcher();$/;"	kind:p	line:126	language:C++	class:TokenMatcher	access:private	signature:()
TokenMatcher	.\Lexer\TokenKind.h	/^class TokenMatcher$/;"	kind:c	line:102	language:C++
TokenMatcher::BuildToken2TokenKindMap	.\Lexer\TokenKind.cpp	/^void TokenMatcher::BuildToken2TokenKindMap()$/;"	kind:f	line:94	language:C++	class:TokenMatcher	signature:()
TokenMatcher::BuildToken2TokenKindMap	.\Lexer\TokenKind.h	/^    void BuildToken2TokenKindMap();$/;"	kind:p	line:128	language:C++	class:TokenMatcher	access:private	signature:()
TokenMatcher::BuildTokenKind2TokenMap	.\Lexer\TokenKind.cpp	/^void TokenMatcher::BuildTokenKind2TokenMap()$/;"	kind:f	line:29	language:C++	class:TokenMatcher	signature:()
TokenMatcher::BuildTokenKind2TokenMap	.\Lexer\TokenKind.h	/^    void BuildTokenKind2TokenMap();$/;"	kind:p	line:127	language:C++	class:TokenMatcher	access:private	signature:()
TokenMatcher::GetKind	.\Lexer\TokenKind.cpp	/^TokenKind TokenMatcher::GetKind(_TCHAR token) const$/;"	kind:f	line:122	language:C++	class:TokenMatcher	signature:(_TCHAR token) const
TokenMatcher::GetKind	.\Lexer\TokenKind.cpp	/^TokenKind TokenMatcher::GetKind(const _TCHAR* token) const$/;"	kind:f	line:109	language:C++	class:TokenMatcher	signature:(const _TCHAR* token) const
TokenMatcher::GetKind	.\Lexer\TokenKind.h	/^    TokenKind GetKind(_TCHAR token) const;$/;"	kind:p	line:111	language:C++	class:TokenMatcher	access:public	signature:(_TCHAR token) const
TokenMatcher::GetKind	.\Lexer\TokenKind.h	/^    TokenKind GetKind(const _TCHAR* token) const;$/;"	kind:p	line:110	language:C++	class:TokenMatcher	access:public	signature:(const _TCHAR* token) const
TokenMatcher::GetMe	.\Lexer\TokenKind.cpp	/^const TokenMatcher& TokenMatcher::GetMe()$/;"	kind:f	line:5	language:C++	class:TokenMatcher	signature:()
TokenMatcher::GetMe	.\Lexer\TokenKind.h	/^    static const TokenMatcher& GetMe();$/;"	kind:p	line:106	language:C++	class:TokenMatcher	access:public	signature:()
TokenMatcher::IsBuiltInType	.\Lexer\TokenKind.h	/^    bool IsBuiltInType(TokenKind kind) const$/;"	kind:f	line:116	language:C++	class:TokenMatcher	access:public	signature:(TokenKind kind) const
TokenMatcher::IsDelimiter	.\Lexer\TokenKind.h	/^    bool IsDelimiter(TokenKind tokenKind) const$/;"	kind:f	line:112	language:C++	class:TokenMatcher	access:public	signature:(TokenKind tokenKind) const
TokenMatcher::IsIdentifier	.\Lexer\TokenKind.h	/^    bool IsIdentifier(TokenKind kind) const$/;"	kind:f	line:120	language:C++	class:TokenMatcher	access:public	signature:(TokenKind kind) const
TokenMatcher::Release	.\Lexer\TokenKind.cpp	/^void TokenMatcher::Release()$/;"	kind:f	line:15	language:C++	class:TokenMatcher	signature:()
TokenMatcher::Release	.\Lexer\TokenKind.h	/^    static void Release();$/;"	kind:p	line:107	language:C++	class:TokenMatcher	access:public	signature:()
TokenMatcher::TokenMatcher	.\Lexer\TokenKind.cpp	/^TokenMatcher::TokenMatcher()$/;"	kind:f	line:20	language:C++	class:TokenMatcher	signature:()
TokenMatcher::TokenMatcher	.\Lexer\TokenKind.h	/^    TokenMatcher();$/;"	kind:p	line:126	language:C++	class:TokenMatcher	access:private	signature:()
TokenMatcher::s_TokenMatcher	.\Lexer\TokenKind.cpp	/^TokenMatcher* TokenMatcher::s_TokenMatcher = NULL;$/;"	kind:m	line:3	language:C++	class:TokenMatcher	file:
TokenMatcher::s_TokenMatcher	.\Lexer\TokenKind.h	/^    static TokenMatcher* s_TokenMatcher;$/;"	kind:m	line:105	language:C++	class:TokenMatcher	access:public
TokenMatcher::token2TokenKindMap	.\Lexer\TokenKind.h	/^    map<wstring, TokenKind> token2TokenKindMap;$/;"	kind:m	line:131	language:C++	class:TokenMatcher	access:private
TokenMatcher::tokenKind2TokenMap	.\Lexer\TokenKind.h	/^    wstring tokenKind2TokenMap[TokenKindEnd];$/;"	kind:m	line:130	language:C++	class:TokenMatcher	access:private
TokenMatcher::~TokenMatcher	.\Lexer\TokenKind.cpp	/^TokenMatcher::~TokenMatcher()$/;"	kind:f	line:26	language:C++	class:TokenMatcher	signature:()
TokenMatcher::~TokenMatcher	.\Lexer\TokenKind.h	/^    ~TokenMatcher();$/;"	kind:p	line:109	language:C++	class:TokenMatcher	access:public	signature:()
TokenSearchDirection	.\Lexer\TokenStream.h	/^enum TokenSearchDirection$/;"	kind:g	line:9	language:C++
TokenSearchScope	.\Lexer\TokenStream.h	/^enum TokenSearchScope$/;"	kind:g	line:15	language:C++
TokenStream	.\Lexer\TokenStream.cpp	/^TokenStream::TokenStream(const wstring path)$/;"	kind:f	line:7	language:C++	class:TokenStream	signature:(const wstring path)
TokenStream	.\Lexer\TokenStream.h	/^	TokenStream(const wstring path);$/;"	kind:p	line:24	language:C++	class:TokenStream	access:public	signature:(const wstring path)
TokenStream	.\Lexer\TokenStream.h	/^class TokenStream$/;"	kind:c	line:21	language:C++
TokenStream.cpp	.\Lexer\TokenStream.cpp	1;"	kind:F	line:1	language:C++
TokenStream.h	.\Lexer\TokenStream.h	1;"	kind:F	line:1	language:C++
TokenStream::FindMatchingBrace	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindMatchingBrace(TokenKind originKind, int& steps) const$/;"	kind:f	line:154	language:C++	class:TokenStream	signature:(TokenKind originKind, int& steps) const
TokenStream::FindMatchingBrace	.\Lexer\TokenStream.h	/^    const Token* FindMatchingBrace(TokenKind tokenKind, int& steps) const;$/;"	kind:p	line:40	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind, int& steps) const
TokenStream::FindNextTargetTokenInSameLine	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindNextTargetTokenInSameLine(TokenKind tokenKind, int& steps) const$/;"	kind:f	line:149	language:C++	class:TokenStream	signature:(TokenKind tokenKind, int& steps) const
TokenStream::FindNextTargetTokenInSameLine	.\Lexer\TokenStream.h	/^    const Token* FindNextTargetTokenInSameLine(TokenKind tokenKind, int& steps) const;$/;"	kind:p	line:39	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind, int& steps) const
TokenStream::FindNextTargetTokenInSameStmt	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindNextTargetTokenInSameStmt(TokenKind tokenKind, int& steps) const$/;"	kind:f	line:144	language:C++	class:TokenStream	signature:(TokenKind tokenKind, int& steps) const
TokenStream::FindNextTargetTokenInSameStmt	.\Lexer\TokenStream.h	/^    const Token* FindNextTargetTokenInSameStmt(TokenKind tokenKind, int& steps) const;$/;"	kind:p	line:38	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind, int& steps) const
TokenStream::FindTargetTokenInScope	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::FindTargetTokenInScope(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const$/;"	kind:f	line:245	language:C++	class:TokenStream	signature:(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const
TokenStream::FindTargetTokenInScope	.\Lexer\TokenStream.h	/^    const Token* FindTargetTokenInScope(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const;$/;"	kind:p	line:53	language:C++	class:TokenStream	access:private	signature:(TokenKind kind, int& steps, TokenSearchDirection direction, TokenSearchScope scope) const
TokenStream::GetCurrentToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GetCurrentToken() const$/;"	kind:f	line:27	language:C++	class:TokenStream	signature:() const
TokenStream::GetCurrentToken	.\Lexer\TokenStream.h	/^    const Token* GetCurrentToken() const;$/;"	kind:p	line:34	language:C++	class:TokenStream	access:public	signature:() const
TokenStream::GetFilePath	.\Lexer\TokenStream.h	/^    const wstring GetFilePath() const$/;"	kind:f	line:28	language:C++	class:TokenStream	access:public	signature:() const
TokenStream::GetToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GetToken(int index) const$/;"	kind:f	line:37	language:C++	class:TokenStream	signature:(int index) const
TokenStream::GetToken	.\Lexer\TokenStream.h	/^    const Token* GetToken(int index) const;$/;"	kind:p	line:56	language:C++	class:TokenStream	access:private	signature:(int index) const
TokenStream::GetTokenByRelativePos	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GetTokenByRelativePos(int pos) const$/;"	kind:f	line:32	language:C++	class:TokenStream	signature:(int pos) const
TokenStream::GetTokenByRelativePos	.\Lexer\TokenStream.h	/^    const Token* GetTokenByRelativePos(int pos) const;$/;"	kind:p	line:35	language:C++	class:TokenStream	access:public	signature:(int pos) const
TokenStream::GotoEol	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoEol()$/;"	kind:f	line:305	language:C++	class:TokenStream	signature:()
TokenStream::GotoEol	.\Lexer\TokenStream.h	/^    const Token* GotoEol();$/;"	kind:p	line:49	language:C++	class:TokenStream	access:public	signature:()
TokenStream::GotoMatchingBrace	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoMatchingBrace(TokenKind kind)$/;"	kind:f	line:234	language:C++	class:TokenStream	signature:(TokenKind kind)
TokenStream::GotoMatchingBrace	.\Lexer\TokenStream.h	/^    const Token* GotoMatchingBrace(TokenKind kind);$/;"	kind:p	line:50	language:C++	class:TokenStream	access:public	signature:(TokenKind kind)
TokenStream::GotoNextTargetTokenInSameLine	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoNextTargetTokenInSameLine(TokenKind tokenKind)$/;"	kind:f	line:291	language:C++	class:TokenStream	signature:(TokenKind tokenKind)
TokenStream::GotoNextTargetTokenInSameLine	.\Lexer\TokenStream.h	/^    const Token* GotoNextTargetTokenInSameLine(TokenKind tokenKind);$/;"	kind:p	line:48	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind)
TokenStream::GotoNextTargetTokenInSameStmt	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoNextTargetTokenInSameStmt(TokenKind tokenKind)$/;"	kind:f	line:277	language:C++	class:TokenStream	signature:(TokenKind tokenKind)
TokenStream::GotoNextTargetTokenInSameStmt	.\Lexer\TokenStream.h	/^    const Token* GotoNextTargetTokenInSameStmt(TokenKind tokenKind);$/;"	kind:p	line:47	language:C++	class:TokenStream	access:public	signature:(TokenKind tokenKind)
TokenStream::GotoNextToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoNextToken()$/;"	kind:f	line:49	language:C++	class:TokenStream	signature:()
TokenStream::GotoNextToken	.\Lexer\TokenStream.h	/^    const Token* GotoNextToken();$/;"	kind:p	line:44	language:C++	class:TokenStream	access:public	signature:()
TokenStream::GotoPrevToken	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoPrevToken()$/;"	kind:f	line:55	language:C++	class:TokenStream	signature:()
TokenStream::GotoPrevToken	.\Lexer\TokenStream.h	/^    const Token* GotoPrevToken();$/;"	kind:p	line:45	language:C++	class:TokenStream	access:public	signature:()
TokenStream::GotoStart	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoStart()$/;"	kind:f	line:21	language:C++	class:TokenStream	signature:()
TokenStream::GotoStart	.\Lexer\TokenStream.h	/^    const Token* GotoStart();$/;"	kind:p	line:43	language:C++	class:TokenStream	access:public	signature:()
TokenStream::GotoTokenByRelativePos	.\Lexer\TokenStream.cpp	/^const Token* TokenStream::GotoTokenByRelativePos(int pos)$/;"	kind:f	line:61	language:C++	class:TokenStream	signature:(int pos)
TokenStream::GotoTokenByRelativePos	.\Lexer\TokenStream.h	/^    const Token* GotoTokenByRelativePos(int pos);$/;"	kind:p	line:46	language:C++	class:TokenStream	access:public	signature:(int pos)
TokenStream::ParseFile	.\Lexer\TokenStream.cpp	/^void TokenStream::ParseFile()$/;"	kind:f	line:67	language:C++	class:TokenStream	signature:()
TokenStream::ParseFile	.\Lexer\TokenStream.h	/^    void ParseFile();$/;"	kind:p	line:27	language:C++	class:TokenStream	access:public	signature:()
TokenStream::SkipWhitespaces	.\Lexer\TokenStream.cpp	/^void TokenStream::SkipWhitespaces(const wstring &stream, int &pos, int &spaceCount, int &tabCount)$/;"	kind:f	line:120	language:C++	class:TokenStream	signature:(const wstring &stream, int &pos, int &spaceCount, int &tabCount)
TokenStream::SkipWhitespaces	.\Lexer\TokenStream.h	/^    void SkipWhitespaces(const wstring &stream, int &pos, int &spaceCount, int &tabCount);$/;"	kind:p	line:55	language:C++	class:TokenStream	access:private	signature:(const wstring &stream, int &pos, int &spaceCount, int &tabCount)
TokenStream::TokenStream	.\Lexer\TokenStream.cpp	/^TokenStream::TokenStream(const wstring path)$/;"	kind:f	line:7	language:C++	class:TokenStream	signature:(const wstring path)
TokenStream::TokenStream	.\Lexer\TokenStream.h	/^	TokenStream(const wstring path);$/;"	kind:p	line:24	language:C++	class:TokenStream	access:public	signature:(const wstring path)
TokenStream::currentIndex	.\Lexer\TokenStream.h	/^    int currentIndex;$/;"	kind:m	line:59	language:C++	class:TokenStream	access:private
TokenStream::path	.\Lexer\TokenStream.h	/^    const wstring path;$/;"	kind:m	line:57	language:C++	class:TokenStream	access:private
TokenStream::tokens	.\Lexer\TokenStream.h	/^    vector<Token*> tokens;$/;"	kind:m	line:58	language:C++	class:TokenStream	access:private
TokenStream::~TokenStream	.\Lexer\TokenStream.cpp	/^TokenStream::~TokenStream(void)$/;"	kind:f	line:13	language:C++	class:TokenStream	signature:(void)
TokenStream::~TokenStream	.\Lexer\TokenStream.h	/^	~TokenStream();$/;"	kind:p	line:25	language:C++	class:TokenStream	access:public	signature:()
TopLevelStmt	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    TopLevelStmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:10	language:C++	class:TopLevelStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
TopLevelStmt	.\SyntaxParser\Stmt\TopLevelStmt.h	/^class TopLevelStmt : public ComposedStmt$/;"	kind:c	line:7	language:C++	inherits:ComposedStmt
TopLevelStmt.h	.\SyntaxParser\Stmt\TopLevelStmt.h	1;"	kind:F	line:1	language:C++
TopLevelStmt::GetKind	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    virtual const StmtKind GetKind() const$/;"	kind:f	line:16	language:C++	class:TopLevelStmt	access:public	implementation:virtual	signature:() const
TopLevelStmt::GetName	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    virtual const wstring GetName() const$/;"	kind:f	line:20	language:C++	class:TopLevelStmt	access:public	implementation:virtual	signature:() const
TopLevelStmt::TopLevelStmt	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    TopLevelStmt(TokenStream &tokenStream, const Stmt* parent)$/;"	kind:f	line:10	language:C++	class:TopLevelStmt	access:public	signature:(TokenStream &tokenStream, const Stmt* parent)
TopLevelStmt::name	.\SyntaxParser\Stmt\TopLevelStmt.h	/^        wstring name = _T("TopLevelStmt: ");$/;"	kind:l	line:22	language:C++
TopLevelStmt::~TopLevelStmt	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    ~TopLevelStmt()$/;"	kind:f	line:13	language:C++	class:TopLevelStmt	access:public	signature:()
Type	.\SyntaxParser\Symbol\Symbol.h	/^    Type();$/;"	kind:p	line:7	language:C++	class:Type	access:public	signature:()
Type	.\SyntaxParser\Symbol\Symbol.h	/^class Type$/;"	kind:c	line:4	language:C++
Type::GetId	.\SyntaxParser\Symbol\Symbol.h	/^    const wstring GetId();$/;"	kind:p	line:10	language:C++	class:Type	access:public	signature:()
Type::GetName	.\SyntaxParser\Symbol\Symbol.h	/^    const wstring GetName();$/;"	kind:p	line:9	language:C++	class:Type	access:public	signature:()
Type::Type	.\SyntaxParser\Symbol\Symbol.h	/^    Type();$/;"	kind:p	line:7	language:C++	class:Type	access:public	signature:()
Type::name	.\SyntaxParser\Symbol\Symbol.h	/^    wstring name;$/;"	kind:m	line:14	language:C++	class:Type	access:private
Type::parentScope	.\SyntaxParser\Symbol\Symbol.h	/^    Type *parentScope;$/;"	kind:m	line:13	language:C++	class:Type	access:private
Type::~Type	.\SyntaxParser\Symbol\Symbol.h	/^    ~Type();$/;"	kind:p	line:8	language:C++	class:Type	access:public	signature:()
TypeOf	.\Lexer\TokenKind.h	/^    TypeOf,$/;"	kind:e	line:55	language:C++	enum:TokenKind
TypeTable	.\SyntaxParser\Symbol\SymbolTable.h	/^    TypeTable();$/;"	kind:p	line:11	language:C++	class:TypeTable	access:private	signature:()
TypeTable	.\SyntaxParser\Symbol\SymbolTable.h	/^class TypeTable$/;"	kind:c	line:4	language:C++
TypeTable::GetMe	.\SyntaxParser\Symbol\SymbolTable.h	/^    static TypeTable& GetMe();$/;"	kind:p	line:7	language:C++	class:TypeTable	access:public	signature:()
TypeTable::Release	.\SyntaxParser\Symbol\SymbolTable.h	/^    static void Release();$/;"	kind:p	line:8	language:C++	class:TypeTable	access:public	signature:()
TypeTable::TypeTable	.\SyntaxParser\Symbol\SymbolTable.h	/^    TypeTable();$/;"	kind:p	line:11	language:C++	class:TypeTable	access:private	signature:()
TypeTable::table	.\SyntaxParser\Symbol\SymbolTable.h	/^    map<wstring, Type> table;$/;"	kind:m	line:12	language:C++	class:TypeTable	access:private
Typedef	.\Lexer\TokenKind.h	/^    Typedef,$/;"	kind:e	line:36	language:C++	enum:TokenKind
Ushort	.\Lexer\TokenKind.h	/^    Ushort,$/;"	kind:e	line:44	language:C++	enum:TokenKind
VaDebug	.\Test\LexerTest.cpp	11;"	kind:d	line:11	language:C++	file:
VarDefExpr	.\SyntaxParser\Stmt\Expr\VarDefExpr.h	/^    VarDefExpr(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:8	language:C++	class:VarDefExpr	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
VarDefExpr	.\SyntaxParser\Stmt\Expr\VarDefExpr.h	/^class VarDefExpr : public Expr$/;"	kind:c	line:5	language:C++	inherits:Expr
VarDefExpr.h	.\SyntaxParser\Stmt\Expr\VarDefExpr.h	1;"	kind:F	line:1	language:C++
VarDefExpr::VarDefExpr	.\SyntaxParser\Stmt\Expr\VarDefExpr.h	/^    VarDefExpr(TokenStream& tokenStream, const Stmt* parent)$/;"	kind:f	line:8	language:C++	class:VarDefExpr	access:public	signature:(TokenStream& tokenStream, const Stmt* parent)
Virtual	.\Lexer\TokenKind.h	/^    Virtual,$/;"	kind:e	line:26	language:C++	enum:TokenKind
Visit	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^void AstPrinter::Visit(const ComposedStmt &stmt)$/;"	kind:f	line:25	language:C++	class:AstPrinter	signature:(const ComposedStmt &stmt)
Visit	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^void AstPrinter::Visit(const IncludeStmt &stmt)$/;"	kind:f	line:20	language:C++	class:AstPrinter	signature:(const IncludeStmt &stmt)
Visit	.\SyntaxParser\StmtVisitor\AstPrinter.h	/^    virtual void Visit(const ComposedStmt &);$/;"	kind:p	line:9	language:C++	class:AstPrinter	access:protected	implementation:virtual	signature:(const ComposedStmt &)
Visit	.\SyntaxParser\StmtVisitor\AstPrinter.h	/^    virtual void Visit(const IncludeStmt &);$/;"	kind:p	line:8	language:C++	class:AstPrinter	access:protected	implementation:virtual	signature:(const IncludeStmt &)
Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^void StmtVisitor::Visit(const Stmt* stmt)$/;"	kind:f	line:4	language:C++	class:StmtVisitor	signature:(const Stmt* stmt)
Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    virtual void Visit(const ComposedStmt &) = 0;$/;"	kind:p	line:16	language:C++	class:StmtVisitor	access:protected	implementation:pure virtual	signature:(const ComposedStmt &)
Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    virtual void Visit(const IncludeStmt &) = 0;$/;"	kind:p	line:15	language:C++	class:StmtVisitor	access:protected	implementation:pure virtual	signature:(const IncludeStmt &)
Visit	.\SyntaxParser\StmtVisitor\StmtVisitor.h	/^    void Visit(const Stmt *);$/;"	kind:p	line:10	language:C++	class:StmtVisitor	access:public	signature:(const Stmt *)
Visit	.\Test\AstParserTest.cpp	/^    astPrinter->Visit(topLevelStmt);$/;"	kind:p	line:16	language:C++	file:	signature:(topLevelStmt)
Void	.\Lexer\TokenKind.h	/^    Void = BuiltInTypeStart,$/;"	kind:e	line:42	language:C++	enum:TokenKind
While	.\Lexer\TokenKind.h	/^    While,$/;"	kind:e	line:15	language:C++	enum:TokenKind
__AST_PARSER_H__	.\SyntaxParser\Ast\AstParser.h	2;"	kind:d	line:2	language:C++
__AST_TRAVERSER_H__	.\SyntaxParser\StmtVisitor\AstPrinter.h	2;"	kind:d	line:2	language:C++
__COMMON_H__	.\Basic\Common.h	2;"	kind:d	line:2	language:C++
__COMPOSED_STMT_H__	.\SyntaxParser\Stmt\ComposedStmt.h	2;"	kind:d	line:2	language:C++
__DELIMITER_ANALYSER_DIVISION_H__	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.h	2;"	kind:d	line:2	language:C++
__DELIMITER_ANALYSER_FACTORY_H__	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	2;"	kind:d	line:2	language:C++
__DELIMITER_ANALYSER_H__	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	2;"	kind:d	line:2	language:C++
__DELIMITER_ANALYSER_SHARP_H__	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.h	2;"	kind:d	line:2	language:C++
__DELIMITER_L_SMALL_BRACE_H__	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.h	2;"	kind:d	line:2	language:C++
__EXPR_H__	.\SyntaxParser\Stmt\Expr\Expr.h	2;"	kind:d	line:2	language:C++
__FUNC_DEF_STMT_H__	.\SyntaxParser\Stmt\FuncDefStmt.h	2;"	kind:d	line:2	language:C++
__INCLUDE_STMT_H__	.\SyntaxParser\Stmt\IncludeStmt.h	2;"	kind:d	line:2	language:C++
__LINE_COMMENT_STMT_H__	.\SyntaxParser\Stmt\LineCommentStmt.h	2;"	kind:d	line:2	language:C++
__SOURCE_FILE_H__	.\Lexer\TokenStream.h	2;"	kind:d	line:2	language:C++
__SOURCE_LOCATION_H__	.\Basic\Location.h	2;"	kind:d	line:2	language:C++
__STMT_H__	.\SyntaxParser\Stmt\Stmt.h	2;"	kind:d	line:2	language:C++
__STMT_VISITOR_H__	.\SyntaxParser\StmtVisitor\StmtVisitor.h	2;"	kind:d	line:2	language:C++
__TOKEN_H__	.\Lexer\Token.h	2;"	kind:d	line:2	language:C++
__TOKEN_KIND_H__	.\Lexer\TokenKind.h	2;"	kind:d	line:2	language:C++
__TOP_LEVEL_STMT_H__	.\SyntaxParser\Stmt\TopLevelStmt.h	2;"	kind:d	line:2	language:C++
__TYPE_H__	.\SyntaxParser\Symbol\Symbol.h	2;"	kind:d	line:2	language:C++
__TYPE_TABLE_H__	.\SyntaxParser\Symbol\SymbolTable.h	2;"	kind:d	line:2	language:C++
__VAR_DEF_EXPR_H__	.\SyntaxParser\Stmt\Expr\VarDefExpr.h	2;"	kind:d	line:2	language:C++
_tmain	.\Test\Test.cpp	/^int _tmain(int argc, _TCHAR* argv[])$/;"	kind:f	line:9	language:C++	signature:(int argc, _TCHAR* argv[])
a	.\Test\ArrayTest.cpp	/^    int a[] = {1, 3,};$/;"	kind:l	line:13	language:C++
astPrinter	.\Test\AstParserTest.cpp	/^    StmtVisitor* astPrinter = new AstPrinter();$/;"	kind:l	line:15	language:C++
beginPosTokenKind	.\Lexer\TokenStream.cpp	/^        TokenKind beginPosTokenKind = tokenMatcher.GetKind(fileStr[beginPos]);$/;"	kind:l	line:83	language:C++
children	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^                    const vector<Stmt*> children = composedStmt->GetChildren();$/;"	kind:l	line:23	language:C++
children	.\SyntaxParser\Stmt\ComposedStmt.h	/^    vector<Stmt*> children;$/;"	kind:m	line:30	language:C++	class:ComposedStmt	access:protected
clear	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^    this->factory.clear();$/;"	kind:p	line:39	language:C++	file:	signature:()
clear	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^    this->children.clear();$/;"	kind:p	line:9	language:C++	file:	signature:()
clear	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^    this->includedFile.clear();$/;"	kind:p	line:23	language:C++	file:	signature:()
columnCount	.\Lexer\TokenStream.cpp	/^    const int columnCount = 2;$/;"	kind:l	line:157	language:C++
composedStmt	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^                const ComposedStmt* composedStmt = dynamic_cast<const ComposedStmt*>(stmt);$/;"	kind:l	line:19	language:C++
content	.\Lexer\Token.h	/^    wstring content;$/;"	kind:m	line:25	language:C++	class:Token	access:private
copy	.\Lexer\TokenStream.cpp	/^        fileStr.copy(tokenChars, endPos - beginPos, beginPos);$/;"	kind:p	line:104	language:C++	file:	signature:(tokenChars, endPos - beginPos, beginPos)
currentIndex	.\Lexer\TokenStream.h	/^    int currentIndex;$/;"	kind:m	line:59	language:C++	class:TokenStream	access:private
currentToken	.\Lexer\TokenStream.cpp	/^    const Token* currentToken = this->GetCurrentToken();$/;"	kind:l	line:247	language:C++
currentToken	.\Lexer\TokenStream.cpp	/^    const Token* currentToken = this->GetCurrentToken();$/;"	kind:l	line:307	language:C++
currentToken	.\Lexer\TokenStream.cpp	/^    const Token* currentToken = this->GetTokenByRelativePos(steps);$/;"	kind:l	line:204	language:C++
currentToken	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^    const Token* currentToken = this->tokenStream.GetTokenByRelativePos(steps);$/;"	kind:l	line:48	language:C++
currentToken	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^    const Token* currentToken = this->tokenStream.GotoTokenByRelativePos(steps + 1);$/;"	kind:l	line:34	language:C++
delimiter	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.h	/^    TokenKind delimiter;$/;"	kind:m	line:15	language:C++	class:DelimiterAnalyser	access:protected
depth	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^    int depth = this->GetDepth(stmt);$/;"	kind:l	line:5	language:C++
depth	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^    int depth = 0;$/;"	kind:l	line:39	language:C++
direction	.\Lexer\TokenStream.cpp	/^    TokenSearchDirection direction = Forward;$/;"	kind:l	line:168	language:C++
endl	.\Lexer\TokenStream.cpp	/^        wcout <<"[" << tokenRow <<", " <<tokenColumn <<"]" <<"\\t\\t" <<tokenChars <<endl;$/;"	kind:l	line:108	language:C++
endl	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^    wcout <<s <<endl;$/;"	kind:l	line:15	language:C++
endl	.\Test\StlTest.cpp	/^        cout <<"~A, " <<name <<endl;$/;"	kind:l	line:18	language:C++
errMsg	.\Lexer\TokenKind.cpp	/^            char errMsg[128] = { 0 };$/;"	kind:l	line:101	language:C++
errMsg	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser.cpp	/^        char errMsg[128] = { 0 };$/;"	kind:l	line:13	language:C++
factory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    map<TokenKind, DelimiterAnalyser*> factory;$/;"	kind:m	line:20	language:C++	class:DelimiterAnalyserFactory	access:private
factory	.\Test\StlTest.cpp	/^    map<string, A> factory;$/;"	kind:l	line:27	language:C++
fileStream	.\Lexer\TokenStream.cpp	/^    wifstream fileStream(this->path);$/;"	kind:p	line:69	language:C++	file:	signature:(this->path)
found	.\Lexer\TokenStream.cpp	/^    bool found = false;$/;"	kind:l	line:169	language:C++
funcBody	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    ComposedStmt* funcBody;$/;"	kind:m	line:31	language:C++	class:FuncDefStmt	access:protected
funcName	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^    const Token* funcName = this->tokenStream.GetTokenByRelativePos(-1);$/;"	kind:l	line:18	language:C++
funcName	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^    const Token* funcName = this->tokenStream.GetTokenByRelativePos(-1);$/;"	kind:l	line:74	language:C++
funcName	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    wstring funcName;$/;"	kind:m	line:30	language:C++	class:FuncDefStmt	access:protected
funcRetType	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^    const Token* funcRetType = this->tokenStream.GetTokenByRelativePos(i);$/;"	kind:l	line:26	language:C++
i	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^    int i = -2;$/;"	kind:l	line:25	language:C++
includeStmt	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^                const IncludeStmt* includeStmt = dynamic_cast<const IncludeStmt*>(stmt);$/;"	kind:l	line:10	language:C++
includedFile	.\SyntaxParser\Stmt\IncludeStmt.h	/^    wstring includedFile;$/;"	kind:m	line:19	language:C++	class:IncludeStmt	access:protected
isIncludedFileInQuota	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^    bool isIncludedFileInQuota = false;$/;"	kind:l	line:24	language:C++
isNewLine	.\Lexer\TokenStream.cpp	/^        bool isNewLine = false;$/;"	kind:l	line:84	language:C++
it	.\Lexer\TokenKind.cpp	/^    map<wstring, TokenKind>::const_iterator it = this->token2TokenKindMap.find(token);$/;"	kind:l	line:111	language:C++
it	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^    map<TokenKind, DelimiterAnalyser*>::const_iterator it = this->factory.begin();$/;"	kind:l	line:34	language:C++
it	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^    map<TokenKind, DelimiterAnalyser*>::const_iterator it = this->factory.find(tokenKind);$/;"	kind:l	line:44	language:C++
kind	.\Lexer\Token.h	/^    TokenKind kind;$/;"	kind:m	line:23	language:C++	class:Token	access:private
kind	.\SyntaxParser\Stmt\ComposedStmt.h	/^    StmtKind kind;$/;"	kind:m	line:33	language:C++	class:ComposedStmt	access:private
leadingSpaceCount	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^    int leadingSpaceCount = depth * TabWidth;$/;"	kind:l	line:6	language:C++
location	.\Lexer\Token.h	/^    Location location;$/;"	kind:m	line:24	language:C++	class:Token	access:private
matchingBrace	.\Lexer\TokenStream.cpp	/^    const Token* matchingBrace = this->FindMatchingBrace(kind, steps);$/;"	kind:l	line:237	language:C++
matchingBraceTable	.\Lexer\TokenStream.cpp	/^    TokenKind matchingBraceTable[3][2] = $/;"	kind:l	line:158	language:C++
maxCharCountInToken	.\Lexer\TokenStream.cpp	/^        const int maxCharCountInToken = 128;$/;"	kind:l	line:102	language:C++
name	.\SyntaxParser\Stmt\TopLevelStmt.h	/^        wstring name = _T("TopLevelStmt: ");$/;"	kind:l	line:22	language:C++
name	.\SyntaxParser\Symbol\Symbol.h	/^    wstring name;$/;"	kind:m	line:14	language:C++	class:Type	access:private
name	.\Test\StlTest.cpp	/^    string name;$/;"	kind:m	line:22	language:C++	class:A	file:	access:private
newToken	.\Lexer\TokenStream.cpp	/^        Token *newToken = new Token(tokenChars, Location(tokenRow, tokenColumn));$/;"	kind:l	line:105	language:C++
parent	.\SyntaxParser\StmtVisitor\StmtVisitor.cpp	/^    const Stmt* parent = stmt.GetParent();$/;"	kind:l	line:40	language:C++
parent	.\SyntaxParser\Stmt\Stmt.h	/^    const Stmt* parent;$/;"	kind:m	line:31	language:C++	class:Stmt	access:protected
parentScope	.\SyntaxParser\Symbol\Symbol.h	/^    Type *parentScope;$/;"	kind:m	line:13	language:C++	class:Type	access:private
path	.\Lexer\TokenStream.h	/^    const wstring path;$/;"	kind:m	line:57	language:C++	class:TokenStream	access:private
proj.vim	.\proj.vim	1;"	kind:F	line:1	language:Vim
push_back	.\Lexer\TokenStream.cpp	/^        this->tokens.push_back(newToken);$/;"	kind:p	line:106	language:C++	file:	signature:(newToken)
push_back	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^    this->children.push_back(child);$/;"	kind:p	line:14	language:C++	file:	signature:(child)
rowCount	.\Lexer\TokenStream.cpp	/^    const int rowCount = 3;$/;"	kind:l	line:156	language:C++
s	.\SyntaxParser\StmtVisitor\AstPrinter.cpp	/^    wstring s;$/;"	kind:l	line:7	language:C++
s:cdpathexpr	.\proj.vim	/^let s:cdpathexpr = 'cd '.s:projpath$/;"	kind:v	line:11	language:Vim
s:csaddexpr	.\proj.vim	/^let s:csaddexpr = 'cs add '.s:projpath.'cscope.out'$/;"	kind:v	line:9	language:Vim
s:projpath	.\proj.vim	/^let s:projpath = 'D:\\Projects\\Compilers\\VimAssist\\'$/;"	kind:v	line:2	language:Vim
s_DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory* DelimiterAnalyserFactory::s_DelimiterAnalyserFactory = NULL;$/;"	kind:m	line:8	language:C++	class:DelimiterAnalyserFactory	file:
s_DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    static DelimiterAnalyserFactory* s_DelimiterAnalyserFactory;$/;"	kind:m	line:19	language:C++	class:DelimiterAnalyserFactory	access:private
s_TokenMatcher	.\Lexer\TokenKind.cpp	/^TokenMatcher* TokenMatcher::s_TokenMatcher = NULL;$/;"	kind:m	line:3	language:C++	class:TokenMatcher	file:
s_TokenMatcher	.\Lexer\TokenKind.h	/^    static TokenMatcher* s_TokenMatcher;$/;"	kind:m	line:105	language:C++	class:TokenMatcher	access:public
spaceCount	.\Lexer\TokenStream.cpp	/^        int spaceCount = 0;$/;"	kind:l	line:77	language:C++
stackSize	.\Lexer\TokenStream.cpp	/^    int stackSize = 1;$/;"	kind:l	line:202	language:C++
steps	.\Lexer\TokenStream.cpp	/^    int steps = 0;$/;"	kind:l	line:236	language:C++
steps	.\Lexer\TokenStream.cpp	/^    int steps = 0;$/;"	kind:l	line:279	language:C++
steps	.\Lexer\TokenStream.cpp	/^    int steps = 0;$/;"	kind:l	line:293	language:C++
steps	.\SyntaxParser\Stmt\FuncDefStmt.cpp	/^    int steps = 0;$/;"	kind:l	line:39	language:C++
steps	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^    int steps = 0;$/;"	kind:l	line:17	language:C++
steps	.\SyntaxParser\Stmt\IncludeStmt.cpp	/^    int steps = 0;$/;"	kind:l	line:25	language:C++
stmt	.\SyntaxParser\Ast\AstParser.cpp	/^        Stmt* stmt = DelimiterAnalyserFactory::GetMe().Analyze(token->GetKind(), this->tokenStream, this->topLevelStmt);$/;"	kind:l	line:25	language:C++
stmt	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Division.cpp	/^    Stmt* stmt = NULL;$/;"	kind:l	line:6	language:C++
stmt	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_LSmallBrace.cpp	/^    Stmt* stmt = NULL;$/;"	kind:l	line:6	language:C++
stmt	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyser_Sharp.cpp	/^    Stmt* stmt = NULL;$/;"	kind:l	line:6	language:C++
tabCount	.\Lexer\TokenStream.cpp	/^        int tabCount = 0;$/;"	kind:l	line:78	language:C++
table	.\SyntaxParser\Symbol\SymbolTable.h	/^    map<wstring, Type> table;$/;"	kind:m	line:12	language:C++	class:TypeTable	access:private
target	.\Lexer\TokenStream.cpp	/^    const Token* target = this->FindNextTargetTokenInSameLine(tokenKind, steps);$/;"	kind:l	line:294	language:C++
target	.\Lexer\TokenStream.cpp	/^    const Token* target = this->FindNextTargetTokenInSameStmt(tokenKind, steps);$/;"	kind:l	line:280	language:C++
targetColumn	.\Lexer\TokenStream.cpp	/^    int targetColumn = -1;$/;"	kind:l	line:167	language:C++
targetKind	.\Lexer\TokenStream.cpp	/^    TokenKind targetKind = TokenKindStart;$/;"	kind:l	line:165	language:C++
targetRow	.\Lexer\TokenStream.cpp	/^    int targetRow = -1;$/;"	kind:l	line:166	language:C++
token	.\Lexer\TokenKind.cpp	/^        wstring token = this->tokenKind2TokenMap[kind];$/;"	kind:l	line:98	language:C++
token	.\SyntaxParser\Ast\AstParser.cpp	/^    const Token *token = this->tokenStream.GetCurrentToken();$/;"	kind:l	line:22	language:C++
token2TokenKindMap	.\Lexer\TokenKind.h	/^    map<wstring, TokenKind> token2TokenKindMap;$/;"	kind:m	line:131	language:C++	class:TokenMatcher	access:private
tokenChars	.\Lexer\TokenStream.cpp	/^        _TCHAR tokenChars[maxCharCountInToken] = { 0 };$/;"	kind:l	line:103	language:C++
tokenColumn	.\Lexer\TokenStream.cpp	/^    int tokenColumn = 1;$/;"	kind:l	line:73	language:C++
tokenKind	.\Lexer\TokenStream.cpp	/^    TokenKind tokenKind = tokenMatcher.GetKind(stream[pos]);$/;"	kind:l	line:126	language:C++
tokenKind2TokenMap	.\Lexer\TokenKind.h	/^    wstring tokenKind2TokenMap[TokenKindEnd];$/;"	kind:m	line:130	language:C++	class:TokenMatcher	access:private
tokenMatcher	.\Lexer\TokenStream.cpp	/^    const TokenMatcher &tokenMatcher = TokenMatcher::GetMe();$/;"	kind:l	line:125	language:C++
tokenMatcher	.\Lexer\TokenStream.cpp	/^    const TokenMatcher& tokenMatcher = TokenMatcher::GetMe();$/;"	kind:l	line:71	language:C++
tokenRow	.\Lexer\TokenStream.cpp	/^    int tokenRow = 1;$/;"	kind:l	line:72	language:C++
tokenStr	.\Lexer\TokenKind.cpp	/^    TCHAR tokenStr[2] = { token, 0 };$/;"	kind:l	line:124	language:C++
tokenStream	.\SyntaxParser\Ast\AstParser.h	/^    TokenStream tokenStream;$/;"	kind:m	line:13	language:C++	class:AstParser	access:private
tokenStream	.\SyntaxParser\Stmt\Stmt.h	/^    TokenStream &tokenStream;$/;"	kind:m	line:30	language:C++	class:Stmt	access:protected
tokens	.\Lexer\TokenStream.h	/^    vector<Token*> tokens;$/;"	kind:m	line:58	language:C++	class:TokenStream	access:private
topLevelStmt	.\SyntaxParser\Ast\AstParser.h	/^    ComposedStmt* topLevelStmt;$/;"	kind:m	line:14	language:C++	class:AstParser	access:private
topLevelStmt	.\Test\AstParserTest.cpp	/^    const Stmt* topLevelStmt = astParser.Parse();$/;"	kind:l	line:13	language:C++
wstring	.\Lexer\TokenStream.cpp	/^    wstring fileStr((istreambuf_iterator<_TCHAR>(fileStream)), istreambuf_iterator<_TCHAR>());$/;"	kind:p	line:70	language:C++	file:	signature:(istreambuf_iterator<_TCHAR>(fileStream)), istreambuf_iterator<_TCHAR>()
~A	.\Test\StlTest.cpp	/^    ~A()$/;"	kind:f	line:16	language:C++	class:A	access:public	signature:()
~AstParser	.\SyntaxParser\Ast\AstParser.cpp	/^AstParser::~AstParser()$/;"	kind:f	line:14	language:C++	class:AstParser	signature:()
~AstParser	.\SyntaxParser\Ast\AstParser.h	/^    ~AstParser();$/;"	kind:p	line:9	language:C++	class:AstParser	access:public	signature:()
~ComposedStmt	.\SyntaxParser\Stmt\ComposedStmt.cpp	/^ComposedStmt::~ComposedStmt()$/;"	kind:f	line:3	language:C++	class:ComposedStmt	signature:()
~ComposedStmt	.\SyntaxParser\Stmt\ComposedStmt.h	/^    ~ComposedStmt();$/;"	kind:p	line:13	language:C++	class:ComposedStmt	access:public	signature:()
~DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.cpp	/^DelimiterAnalyserFactory::~DelimiterAnalyserFactory()$/;"	kind:f	line:32	language:C++	class:DelimiterAnalyserFactory	signature:()
~DelimiterAnalyserFactory	.\SyntaxParser\DelimiterAnalyser\DelimiterAnalyserFactory.h	/^    ~DelimiterAnalyserFactory();$/;"	kind:p	line:17	language:C++	class:DelimiterAnalyserFactory	access:private	signature:()
~FuncDefStmt	.\SyntaxParser\Stmt\FuncDefStmt.h	/^    ~FuncDefStmt()$/;"	kind:f	line:16	language:C++	class:FuncDefStmt	access:public	signature:()
~Token	.\Lexer\Token.cpp	/^Token::~Token()$/;"	kind:f	line:18	language:C++	class:Token	signature:()
~Token	.\Lexer\Token.h	/^	~Token();$/;"	kind:p	line:12	language:C++	class:Token	access:public	signature:()
~TokenMatcher	.\Lexer\TokenKind.cpp	/^TokenMatcher::~TokenMatcher()$/;"	kind:f	line:26	language:C++	class:TokenMatcher	signature:()
~TokenMatcher	.\Lexer\TokenKind.h	/^    ~TokenMatcher();$/;"	kind:p	line:109	language:C++	class:TokenMatcher	access:public	signature:()
~TokenStream	.\Lexer\TokenStream.cpp	/^TokenStream::~TokenStream(void)$/;"	kind:f	line:13	language:C++	class:TokenStream	signature:(void)
~TokenStream	.\Lexer\TokenStream.h	/^	~TokenStream();$/;"	kind:p	line:25	language:C++	class:TokenStream	access:public	signature:()
~TopLevelStmt	.\SyntaxParser\Stmt\TopLevelStmt.h	/^    ~TopLevelStmt()$/;"	kind:f	line:13	language:C++	class:TopLevelStmt	access:public	signature:()
~Type	.\SyntaxParser\Symbol\Symbol.h	/^    ~Type();$/;"	kind:p	line:8	language:C++	class:Type	access:public	signature:()
